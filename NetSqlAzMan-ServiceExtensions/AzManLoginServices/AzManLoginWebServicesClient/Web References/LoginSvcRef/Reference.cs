//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace AzManLoginWebServicesClient.LoginSvcRef {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_ILoginService", Namespace="http://tempuri.org/")]
    public partial class LoginService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback TestOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartLoginEncOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLoginByIdAndUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback RevalidateLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartLogOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckLoginAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckLoginStatusAndAuthorizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePwdOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePwdExOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LoginService() {
            this.Url = "http://logindemo.sise.edu.pe:8181/AzManLoginWebServices/LoginService.svc";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event TestCompletedEventHandler TestCompleted;
        
        /// <remarks/>
        public event StartLoginCompletedEventHandler StartLoginCompleted;
        
        /// <remarks/>
        public event StartLoginEncCompletedEventHandler StartLoginEncCompleted;
        
        /// <remarks/>
        public event CreateLoginCompletedEventHandler CreateLoginCompleted;
        
        /// <remarks/>
        public event GetLoginCompletedEventHandler GetLoginCompleted;
        
        /// <remarks/>
        public event GetLoginByIdAndUserCompletedEventHandler GetLoginByIdAndUserCompleted;
        
        /// <remarks/>
        public event RevalidateLoginCompletedEventHandler RevalidateLoginCompleted;
        
        /// <remarks/>
        public event StartLogOutCompletedEventHandler StartLogOutCompleted;
        
        /// <remarks/>
        public event CheckLoginAccessCompletedEventHandler CheckLoginAccessCompleted;
        
        /// <remarks/>
        public event CheckLoginStatusAndAuthorizationCompletedEventHandler CheckLoginStatusAndAuthorizationCompleted;
        
        /// <remarks/>
        public event ChangePwdCompletedEventHandler ChangePwdCompleted;
        
        /// <remarks/>
        public event ChangePwdExCompletedEventHandler ChangePwdExCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ILoginService/Test", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Test([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string input, out bool TestResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool TestResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string output) {
            object[] results = this.Invoke("Test", new object[] {
                        input});
            TestResult = ((bool)(results[0]));
            TestResultSpecified = ((bool)(results[1]));
            output = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void TestAsync(string input) {
            this.TestAsync(input, null);
        }
        
        /// <remarks/>
        public void TestAsync(string input, object userState) {
            if ((this.TestOperationCompleted == null)) {
                this.TestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestOperationCompleted);
            }
            this.InvokeAsync("Test", new object[] {
                        input}, this.TestOperationCompleted, userState);
        }
        
        private void OnTestOperationCompleted(object arg) {
            if ((this.TestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestCompleted(this, new TestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ILoginService/StartLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StartLogin([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pwd, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string appName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string store, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string app, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string requiredItem, out bool StartLoginResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool StartLoginResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DBUser user, out AuthorizationType aut, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool autSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out LoginInfo login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string attributeString) {
            object[] results = this.Invoke("StartLogin", new object[] {
                        userName,
                        pwd,
                        appName,
                        store,
                        app,
                        requiredItem});
            StartLoginResult = ((bool)(results[0]));
            StartLoginResultSpecified = ((bool)(results[1]));
            user = ((DBUser)(results[2]));
            aut = ((AuthorizationType)(results[3]));
            autSpecified = ((bool)(results[4]));
            login = ((LoginInfo)(results[5]));
            attributeString = ((string)(results[6]));
        }
        
        /// <remarks/>
        public void StartLoginAsync(string userName, string pwd, string appName, string store, string app, string requiredItem) {
            this.StartLoginAsync(userName, pwd, appName, store, app, requiredItem, null);
        }
        
        /// <remarks/>
        public void StartLoginAsync(string userName, string pwd, string appName, string store, string app, string requiredItem, object userState) {
            if ((this.StartLoginOperationCompleted == null)) {
                this.StartLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartLoginOperationCompleted);
            }
            this.InvokeAsync("StartLogin", new object[] {
                        userName,
                        pwd,
                        appName,
                        store,
                        app,
                        requiredItem}, this.StartLoginOperationCompleted, userState);
        }
        
        private void OnStartLoginOperationCompleted(object arg) {
            if ((this.StartLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartLoginCompleted(this, new StartLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ILoginService/StartLoginEnc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StartLoginEnc([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string encodedUserName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string appName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string store, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string app, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string requiredItem, out bool StartLoginEncResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool StartLoginEncResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DBUser user, out AuthorizationType aut, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool autSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out LoginInfo login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string attributeString) {
            object[] results = this.Invoke("StartLoginEnc", new object[] {
                        encodedUserName,
                        appName,
                        store,
                        app,
                        requiredItem});
            StartLoginEncResult = ((bool)(results[0]));
            StartLoginEncResultSpecified = ((bool)(results[1]));
            user = ((DBUser)(results[2]));
            aut = ((AuthorizationType)(results[3]));
            autSpecified = ((bool)(results[4]));
            login = ((LoginInfo)(results[5]));
            attributeString = ((string)(results[6]));
        }
        
        /// <remarks/>
        public void StartLoginEncAsync(string encodedUserName, string appName, string store, string app, string requiredItem) {
            this.StartLoginEncAsync(encodedUserName, appName, store, app, requiredItem, null);
        }
        
        /// <remarks/>
        public void StartLoginEncAsync(string encodedUserName, string appName, string store, string app, string requiredItem, object userState) {
            if ((this.StartLoginEncOperationCompleted == null)) {
                this.StartLoginEncOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartLoginEncOperationCompleted);
            }
            this.InvokeAsync("StartLoginEnc", new object[] {
                        encodedUserName,
                        appName,
                        store,
                        app,
                        requiredItem}, this.StartLoginEncOperationCompleted, userState);
        }
        
        private void OnStartLoginEncOperationCompleted(object arg) {
            if ((this.StartLoginEncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartLoginEncCompleted(this, new StartLoginEncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ILoginService/CreateLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateLogin([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string clientApplication, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string azManStore, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string azManApplication, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string azManItem, out bool CreateLoginResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool CreateLoginResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DBUser dbUser, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out LoginInfo loginInfo, out AuthorizationType authorizationType, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool authorizationTypeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string outputString) {
            object[] results = this.Invoke("CreateLogin", new object[] {
                        userName,
                        password,
                        clientApplication,
                        azManStore,
                        azManApplication,
                        azManItem});
            CreateLoginResult = ((bool)(results[0]));
            CreateLoginResultSpecified = ((bool)(results[1]));
            dbUser = ((DBUser)(results[2]));
            loginInfo = ((LoginInfo)(results[3]));
            authorizationType = ((AuthorizationType)(results[4]));
            authorizationTypeSpecified = ((bool)(results[5]));
            outputString = ((string)(results[6]));
        }
        
        /// <remarks/>
        public void CreateLoginAsync(string userName, string password, string clientApplication, string azManStore, string azManApplication, string azManItem) {
            this.CreateLoginAsync(userName, password, clientApplication, azManStore, azManApplication, azManItem, null);
        }
        
        /// <remarks/>
        public void CreateLoginAsync(string userName, string password, string clientApplication, string azManStore, string azManApplication, string azManItem, object userState) {
            if ((this.CreateLoginOperationCompleted == null)) {
                this.CreateLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateLoginOperationCompleted);
            }
            this.InvokeAsync("CreateLogin", new object[] {
                        userName,
                        password,
                        clientApplication,
                        azManStore,
                        azManApplication,
                        azManItem}, this.CreateLoginOperationCompleted, userState);
        }
        
        private void OnCreateLoginOperationCompleted(object arg) {
            if ((this.CreateLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateLoginCompleted(this, new CreateLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ILoginService/GetLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetLogin([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loginId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string appName, out bool GetLoginResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool GetLoginResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DBUser user, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out LoginInfo login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string attributeString) {
            object[] results = this.Invoke("GetLogin", new object[] {
                        loginId,
                        userName,
                        appName});
            GetLoginResult = ((bool)(results[0]));
            GetLoginResultSpecified = ((bool)(results[1]));
            user = ((DBUser)(results[2]));
            login = ((LoginInfo)(results[3]));
            attributeString = ((string)(results[4]));
        }
        
        /// <remarks/>
        public void GetLoginAsync(string loginId, string userName, string appName) {
            this.GetLoginAsync(loginId, userName, appName, null);
        }
        
        /// <remarks/>
        public void GetLoginAsync(string loginId, string userName, string appName, object userState) {
            if ((this.GetLoginOperationCompleted == null)) {
                this.GetLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLoginOperationCompleted);
            }
            this.InvokeAsync("GetLogin", new object[] {
                        loginId,
                        userName,
                        appName}, this.GetLoginOperationCompleted, userState);
        }
        
        private void OnGetLoginOperationCompleted(object arg) {
            if ((this.GetLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLoginCompleted(this, new GetLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ILoginService/GetLoginByIdAndUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetLoginByIdAndUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loginId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, out bool GetLoginByIdAndUserResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool GetLoginByIdAndUserResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DBUser dbUser, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out LoginInfo loginInfo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string outputString) {
            object[] results = this.Invoke("GetLoginByIdAndUser", new object[] {
                        loginId,
                        userName});
            GetLoginByIdAndUserResult = ((bool)(results[0]));
            GetLoginByIdAndUserResultSpecified = ((bool)(results[1]));
            dbUser = ((DBUser)(results[2]));
            loginInfo = ((LoginInfo)(results[3]));
            outputString = ((string)(results[4]));
        }
        
        /// <remarks/>
        public void GetLoginByIdAndUserAsync(string loginId, string userName) {
            this.GetLoginByIdAndUserAsync(loginId, userName, null);
        }
        
        /// <remarks/>
        public void GetLoginByIdAndUserAsync(string loginId, string userName, object userState) {
            if ((this.GetLoginByIdAndUserOperationCompleted == null)) {
                this.GetLoginByIdAndUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLoginByIdAndUserOperationCompleted);
            }
            this.InvokeAsync("GetLoginByIdAndUser", new object[] {
                        loginId,
                        userName}, this.GetLoginByIdAndUserOperationCompleted, userState);
        }
        
        private void OnGetLoginByIdAndUserOperationCompleted(object arg) {
            if ((this.GetLoginByIdAndUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLoginByIdAndUserCompleted(this, new GetLoginByIdAndUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ILoginService/RevalidateLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RevalidateLogin([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loginId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pwd, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string appName, out bool RevalidateLoginResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool RevalidateLoginResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out DBUser user, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out LoginInfo login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string attributeString) {
            object[] results = this.Invoke("RevalidateLogin", new object[] {
                        loginId,
                        userName,
                        pwd,
                        appName});
            RevalidateLoginResult = ((bool)(results[0]));
            RevalidateLoginResultSpecified = ((bool)(results[1]));
            user = ((DBUser)(results[2]));
            login = ((LoginInfo)(results[3]));
            attributeString = ((string)(results[4]));
        }
        
        /// <remarks/>
        public void RevalidateLoginAsync(string loginId, string userName, string pwd, string appName) {
            this.RevalidateLoginAsync(loginId, userName, pwd, appName, null);
        }
        
        /// <remarks/>
        public void RevalidateLoginAsync(string loginId, string userName, string pwd, string appName, object userState) {
            if ((this.RevalidateLoginOperationCompleted == null)) {
                this.RevalidateLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevalidateLoginOperationCompleted);
            }
            this.InvokeAsync("RevalidateLogin", new object[] {
                        loginId,
                        userName,
                        pwd,
                        appName}, this.RevalidateLoginOperationCompleted, userState);
        }
        
        private void OnRevalidateLoginOperationCompleted(object arg) {
            if ((this.RevalidateLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevalidateLoginCompleted(this, new RevalidateLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ILoginService/StartLogOut", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StartLogOut([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] LoginInfo login, out bool StartLogOutResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool StartLogOutResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string attributeString) {
            object[] results = this.Invoke("StartLogOut", new object[] {
                        login});
            StartLogOutResult = ((bool)(results[0]));
            StartLogOutResultSpecified = ((bool)(results[1]));
            attributeString = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void StartLogOutAsync(LoginInfo login) {
            this.StartLogOutAsync(login, null);
        }
        
        /// <remarks/>
        public void StartLogOutAsync(LoginInfo login, object userState) {
            if ((this.StartLogOutOperationCompleted == null)) {
                this.StartLogOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartLogOutOperationCompleted);
            }
            this.InvokeAsync("StartLogOut", new object[] {
                        login}, this.StartLogOutOperationCompleted, userState);
        }
        
        private void OnStartLogOutOperationCompleted(object arg) {
            if ((this.StartLogOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartLogOutCompleted(this, new StartLogOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ILoginService/CheckLoginAccess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckLoginAccess([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string store, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string app, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string item, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] LoginInfo loginInfo, out bool CheckLoginAccessResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool CheckLoginAccessResultSpecified, out LoginStatusEnum loginStatus, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool loginStatusSpecified, out AuthorizationType aut, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool autSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string attributeString) {
            object[] results = this.Invoke("CheckLoginAccess", new object[] {
                        store,
                        app,
                        item,
                        loginInfo});
            CheckLoginAccessResult = ((bool)(results[0]));
            CheckLoginAccessResultSpecified = ((bool)(results[1]));
            loginStatus = ((LoginStatusEnum)(results[2]));
            loginStatusSpecified = ((bool)(results[3]));
            aut = ((AuthorizationType)(results[4]));
            autSpecified = ((bool)(results[5]));
            attributeString = ((string)(results[6]));
        }
        
        /// <remarks/>
        public void CheckLoginAccessAsync(string store, string app, string item, LoginInfo loginInfo) {
            this.CheckLoginAccessAsync(store, app, item, loginInfo, null);
        }
        
        /// <remarks/>
        public void CheckLoginAccessAsync(string store, string app, string item, LoginInfo loginInfo, object userState) {
            if ((this.CheckLoginAccessOperationCompleted == null)) {
                this.CheckLoginAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckLoginAccessOperationCompleted);
            }
            this.InvokeAsync("CheckLoginAccess", new object[] {
                        store,
                        app,
                        item,
                        loginInfo}, this.CheckLoginAccessOperationCompleted, userState);
        }
        
        private void OnCheckLoginAccessOperationCompleted(object arg) {
            if ((this.CheckLoginAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckLoginAccessCompleted(this, new CheckLoginAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ILoginService/CheckLoginStatusAndAuthorization", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckLoginStatusAndAuthorization([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string azManStore, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string azManApplication, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string azManItem, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] LoginInfo loginInfo, out bool CheckLoginStatusAndAuthorizationResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool CheckLoginStatusAndAuthorizationResultSpecified, out LoginStatusEnum loginStatus, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool loginStatusSpecified, out AuthorizationType authorizationType, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool authorizationTypeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string outputString) {
            object[] results = this.Invoke("CheckLoginStatusAndAuthorization", new object[] {
                        azManStore,
                        azManApplication,
                        azManItem,
                        loginInfo});
            CheckLoginStatusAndAuthorizationResult = ((bool)(results[0]));
            CheckLoginStatusAndAuthorizationResultSpecified = ((bool)(results[1]));
            loginStatus = ((LoginStatusEnum)(results[2]));
            loginStatusSpecified = ((bool)(results[3]));
            authorizationType = ((AuthorizationType)(results[4]));
            authorizationTypeSpecified = ((bool)(results[5]));
            outputString = ((string)(results[6]));
        }
        
        /// <remarks/>
        public void CheckLoginStatusAndAuthorizationAsync(string azManStore, string azManApplication, string azManItem, LoginInfo loginInfo) {
            this.CheckLoginStatusAndAuthorizationAsync(azManStore, azManApplication, azManItem, loginInfo, null);
        }
        
        /// <remarks/>
        public void CheckLoginStatusAndAuthorizationAsync(string azManStore, string azManApplication, string azManItem, LoginInfo loginInfo, object userState) {
            if ((this.CheckLoginStatusAndAuthorizationOperationCompleted == null)) {
                this.CheckLoginStatusAndAuthorizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckLoginStatusAndAuthorizationOperationCompleted);
            }
            this.InvokeAsync("CheckLoginStatusAndAuthorization", new object[] {
                        azManStore,
                        azManApplication,
                        azManItem,
                        loginInfo}, this.CheckLoginStatusAndAuthorizationOperationCompleted, userState);
        }
        
        private void OnCheckLoginStatusAndAuthorizationOperationCompleted(object arg) {
            if ((this.CheckLoginStatusAndAuthorizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckLoginStatusAndAuthorizationCompleted(this, new CheckLoginStatusAndAuthorizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ILoginService/ChangePwd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangePwd([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] LoginInfo login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string current, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string renewed, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string confirmation, out bool ChangePwdResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ChangePwdResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string statusMessages) {
            object[] results = this.Invoke("ChangePwd", new object[] {
                        login,
                        current,
                        renewed,
                        confirmation});
            ChangePwdResult = ((bool)(results[0]));
            ChangePwdResultSpecified = ((bool)(results[1]));
            statusMessages = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void ChangePwdAsync(LoginInfo login, string current, string renewed, string confirmation) {
            this.ChangePwdAsync(login, current, renewed, confirmation, null);
        }
        
        /// <remarks/>
        public void ChangePwdAsync(LoginInfo login, string current, string renewed, string confirmation, object userState) {
            if ((this.ChangePwdOperationCompleted == null)) {
                this.ChangePwdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePwdOperationCompleted);
            }
            this.InvokeAsync("ChangePwd", new object[] {
                        login,
                        current,
                        renewed,
                        confirmation}, this.ChangePwdOperationCompleted, userState);
        }
        
        private void OnChangePwdOperationCompleted(object arg) {
            if ((this.ChangePwdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePwdCompleted(this, new ChangePwdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ILoginService/ChangePwdEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangePwdEx([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] LoginInfo login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string current, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string renewed, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string confirmation, out bool ChangePwdExResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ChangePwdExResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string statusType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string statusMessage, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string statusTrace) {
            object[] results = this.Invoke("ChangePwdEx", new object[] {
                        login,
                        current,
                        renewed,
                        confirmation});
            ChangePwdExResult = ((bool)(results[0]));
            ChangePwdExResultSpecified = ((bool)(results[1]));
            statusType = ((string)(results[2]));
            statusMessage = ((string)(results[3]));
            statusTrace = ((string)(results[4]));
        }
        
        /// <remarks/>
        public void ChangePwdExAsync(LoginInfo login, string current, string renewed, string confirmation) {
            this.ChangePwdExAsync(login, current, renewed, confirmation, null);
        }
        
        /// <remarks/>
        public void ChangePwdExAsync(LoginInfo login, string current, string renewed, string confirmation, object userState) {
            if ((this.ChangePwdExOperationCompleted == null)) {
                this.ChangePwdExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePwdExOperationCompleted);
            }
            this.InvokeAsync("ChangePwdEx", new object[] {
                        login,
                        current,
                        renewed,
                        confirmation}, this.ChangePwdExOperationCompleted, userState);
        }
        
        private void OnChangePwdExOperationCompleted(object arg) {
            if ((this.ChangePwdExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePwdExCompleted(this, new ChangePwdExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34281")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/NetSqlAzMan.Cache")]
    public partial class DBUser {
        
        private string attributeStringField;
        
        private int userIDField;
        
        private bool userIDFieldSpecified;
        
        private string userNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AttributeString {
            get {
                return this.attributeStringField;
            }
            set {
                this.attributeStringField = value;
            }
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UserIDSpecified {
            get {
                return this.userIDFieldSpecified;
            }
            set {
                this.userIDFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34281")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/AzManLoginWebServices")]
    public partial class LoginInfo {
        
        private string appNameField;
        
        private string loginGuidField;
        
        private string loginIdField;
        
        private LoginStatusEnum statusField;
        
        private bool statusFieldSpecified;
        
        private int timeOutField;
        
        private bool timeOutFieldSpecified;
        
        private string userNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AppName {
            get {
                return this.appNameField;
            }
            set {
                this.appNameField = value;
            }
        }
        
        /// <remarks/>
        public string LoginGuid {
            get {
                return this.loginGuidField;
            }
            set {
                this.loginGuidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LoginId {
            get {
                return this.loginIdField;
            }
            set {
                this.loginIdField = value;
            }
        }
        
        /// <remarks/>
        public LoginStatusEnum Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StatusSpecified {
            get {
                return this.statusFieldSpecified;
            }
            set {
                this.statusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int TimeOut {
            get {
                return this.timeOutField;
            }
            set {
                this.timeOutField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeOutSpecified {
            get {
                return this.timeOutFieldSpecified;
            }
            set {
                this.timeOutFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34281")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/AzManLoginWebServices")]
    public enum LoginStatusEnum {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        LoggedIn,
        
        /// <remarks/>
        Expired,
        
        /// <remarks/>
        LoggedOut,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34281")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://NetSqlAzMan/ServiceModel")]
    public enum AuthorizationType {
        
        /// <remarks/>
        Neutral,
        
        /// <remarks/>
        Allow,
        
        /// <remarks/>
        Deny,
        
        /// <remarks/>
        AllowWithDelegation,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void TestCompletedEventHandler(object sender, TestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool TestResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool TestResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string output {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void StartLoginCompletedEventHandler(object sender, StartLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool StartLoginResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool StartLoginResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public DBUser user {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DBUser)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public AuthorizationType aut {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuthorizationType)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public bool autSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public LoginInfo login {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LoginInfo)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string attributeString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void StartLoginEncCompletedEventHandler(object sender, StartLoginEncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartLoginEncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartLoginEncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool StartLoginEncResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool StartLoginEncResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public DBUser user {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DBUser)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public AuthorizationType aut {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuthorizationType)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public bool autSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public LoginInfo login {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LoginInfo)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string attributeString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CreateLoginCompletedEventHandler(object sender, CreateLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool CreateLoginResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool CreateLoginResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public DBUser dbUser {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DBUser)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public LoginInfo loginInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LoginInfo)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public AuthorizationType authorizationType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuthorizationType)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool authorizationTypeSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string outputString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetLoginCompletedEventHandler(object sender, GetLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool GetLoginResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool GetLoginResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public DBUser user {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DBUser)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public LoginInfo login {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LoginInfo)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string attributeString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetLoginByIdAndUserCompletedEventHandler(object sender, GetLoginByIdAndUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLoginByIdAndUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLoginByIdAndUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool GetLoginByIdAndUserResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool GetLoginByIdAndUserResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public DBUser dbUser {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DBUser)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public LoginInfo loginInfo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LoginInfo)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string outputString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void RevalidateLoginCompletedEventHandler(object sender, RevalidateLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RevalidateLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RevalidateLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool RevalidateLoginResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool RevalidateLoginResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public DBUser user {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DBUser)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public LoginInfo login {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LoginInfo)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string attributeString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void StartLogOutCompletedEventHandler(object sender, StartLogOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartLogOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartLogOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool StartLogOutResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool StartLogOutResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string attributeString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CheckLoginAccessCompletedEventHandler(object sender, CheckLoginAccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckLoginAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckLoginAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool CheckLoginAccessResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool CheckLoginAccessResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public LoginStatusEnum loginStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LoginStatusEnum)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool loginStatusSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public AuthorizationType aut {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuthorizationType)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool autSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string attributeString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CheckLoginStatusAndAuthorizationCompletedEventHandler(object sender, CheckLoginStatusAndAuthorizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckLoginStatusAndAuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckLoginStatusAndAuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool CheckLoginStatusAndAuthorizationResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool CheckLoginStatusAndAuthorizationResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public LoginStatusEnum loginStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LoginStatusEnum)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool loginStatusSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public AuthorizationType authorizationType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuthorizationType)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool authorizationTypeSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string outputString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ChangePwdCompletedEventHandler(object sender, ChangePwdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePwdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePwdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ChangePwdResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ChangePwdResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string statusMessages {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ChangePwdExCompletedEventHandler(object sender, ChangePwdExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePwdExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePwdExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ChangePwdExResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ChangePwdExResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string statusType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string statusMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string statusTrace {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
}

#pragma warning restore 1591