//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AzManLoginWebServicesTest.LoginSvcRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DBUser", Namespace="http://schemas.datacontract.org/2004/07/NetSqlAzMan.Cache")]
    [System.SerializableAttribute()]
    public partial class DBUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttributeStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttributeString {
            get {
                return this.AttributeStringField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributeStringField, value) != true)) {
                    this.AttributeStringField = value;
                    this.RaisePropertyChanged("AttributeString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizationType", Namespace="http://NetSqlAzMan/ServiceModel")]
    public enum AuthorizationType : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Neutral = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Allow = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deny = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllowWithDelegation = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginInfo", Namespace="http://schemas.datacontract.org/2004/07/AzManLoginWebServices")]
    [System.SerializableAttribute()]
    public partial class LoginInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LDAPDomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid LoginGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppName {
            get {
                return this.AppNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AppNameField, value) != true)) {
                    this.AppNameField = value;
                    this.RaisePropertyChanged("AppName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LDAPDomain {
            get {
                return this.LDAPDomainField;
            }
            set {
                if ((object.ReferenceEquals(this.LDAPDomainField, value) != true)) {
                    this.LDAPDomainField = value;
                    this.RaisePropertyChanged("LDAPDomain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid LoginGuid {
            get {
                return this.LoginGuidField;
            }
            set {
                if ((this.LoginGuidField.Equals(value) != true)) {
                    this.LoginGuidField = value;
                    this.RaisePropertyChanged("LoginGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoginId {
            get {
                return this.LoginIdField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginIdField, value) != true)) {
                    this.LoginIdField = value;
                    this.RaisePropertyChanged("LoginId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeOut {
            get {
                return this.TimeOutField;
            }
            set {
                if ((this.TimeOutField.Equals(value) != true)) {
                    this.TimeOutField = value;
                    this.RaisePropertyChanged("TimeOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginStatusEnum", Namespace="http://schemas.datacontract.org/2004/07/AzManLoginWebServices")]
    public enum LoginStatusEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LoggedIn = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Expired = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LoggedOut = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LoginSvcRef.ILoginService")]
    public interface ILoginService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/Test", ReplyAction="http://tempuri.org/ILoginService/TestResponse")]
        bool Test(out string output, string input);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILoginService/Test", ReplyAction="http://tempuri.org/ILoginService/TestResponse")]
        System.IAsyncResult BeginTest(string input, System.AsyncCallback callback, object asyncState);
        
        bool EndTest(out string output, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/StartLogin", ReplyAction="http://tempuri.org/ILoginService/StartLoginResponse")]
        bool StartLogin(out AzManLoginWebServicesTest.LoginSvcRef.DBUser user, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, out string attributeString, string userName, string pwd, string appName, string store, string app, string requiredItem);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILoginService/StartLogin", ReplyAction="http://tempuri.org/ILoginService/StartLoginResponse")]
        System.IAsyncResult BeginStartLogin(string userName, string pwd, string appName, string store, string app, string requiredItem, System.AsyncCallback callback, object asyncState);
        
        bool EndStartLogin(out AzManLoginWebServicesTest.LoginSvcRef.DBUser user, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, out string attributeString, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/StartLoginEnc", ReplyAction="http://tempuri.org/ILoginService/StartLoginEncResponse")]
        bool StartLoginEnc(out AzManLoginWebServicesTest.LoginSvcRef.DBUser user, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, out string attributeString, string encodedUserName, string appName, string store, string app, string requiredItem);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILoginService/StartLoginEnc", ReplyAction="http://tempuri.org/ILoginService/StartLoginEncResponse")]
        System.IAsyncResult BeginStartLoginEnc(string encodedUserName, string appName, string store, string app, string requiredItem, System.AsyncCallback callback, object asyncState);
        
        bool EndStartLoginEnc(out AzManLoginWebServicesTest.LoginSvcRef.DBUser user, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, out string attributeString, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/CreateLogin", ReplyAction="http://tempuri.org/ILoginService/CreateLoginResponse")]
        bool CreateLogin(out AzManLoginWebServicesTest.LoginSvcRef.DBUser dbUser, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType authorizationType, out string outputString, string userName, string password, string clientApplication, string azManStore, string azManApplication, string azManItem);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILoginService/CreateLogin", ReplyAction="http://tempuri.org/ILoginService/CreateLoginResponse")]
        System.IAsyncResult BeginCreateLogin(string userName, string password, string clientApplication, string azManStore, string azManApplication, string azManItem, System.AsyncCallback callback, object asyncState);
        
        bool EndCreateLogin(out AzManLoginWebServicesTest.LoginSvcRef.DBUser dbUser, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType authorizationType, out string outputString, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/GetLogin", ReplyAction="http://tempuri.org/ILoginService/GetLoginResponse")]
        bool GetLogin(out AzManLoginWebServicesTest.LoginSvcRef.DBUser user, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, out string attributeString, string loginId, string userName, string appName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILoginService/GetLogin", ReplyAction="http://tempuri.org/ILoginService/GetLoginResponse")]
        System.IAsyncResult BeginGetLogin(string loginId, string userName, string appName, System.AsyncCallback callback, object asyncState);
        
        bool EndGetLogin(out AzManLoginWebServicesTest.LoginSvcRef.DBUser user, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, out string attributeString, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/GetLoginByIdAndUser", ReplyAction="http://tempuri.org/ILoginService/GetLoginByIdAndUserResponse")]
        bool GetLoginByIdAndUser(out AzManLoginWebServicesTest.LoginSvcRef.DBUser dbUser, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo, out string outputString, string loginId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILoginService/GetLoginByIdAndUser", ReplyAction="http://tempuri.org/ILoginService/GetLoginByIdAndUserResponse")]
        System.IAsyncResult BeginGetLoginByIdAndUser(string loginId, string userName, System.AsyncCallback callback, object asyncState);
        
        bool EndGetLoginByIdAndUser(out AzManLoginWebServicesTest.LoginSvcRef.DBUser dbUser, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo, out string outputString, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/RevalidateLogin", ReplyAction="http://tempuri.org/ILoginService/RevalidateLoginResponse")]
        bool RevalidateLogin(out AzManLoginWebServicesTest.LoginSvcRef.DBUser user, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, out string attributeString, string loginId, string userName, string pwd, string appName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILoginService/RevalidateLogin", ReplyAction="http://tempuri.org/ILoginService/RevalidateLoginResponse")]
        System.IAsyncResult BeginRevalidateLogin(string loginId, string userName, string pwd, string appName, System.AsyncCallback callback, object asyncState);
        
        bool EndRevalidateLogin(out AzManLoginWebServicesTest.LoginSvcRef.DBUser user, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, out string attributeString, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/StartLogOut", ReplyAction="http://tempuri.org/ILoginService/StartLogOutResponse")]
        bool StartLogOut(out string attributeString, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILoginService/StartLogOut", ReplyAction="http://tempuri.org/ILoginService/StartLogOutResponse")]
        System.IAsyncResult BeginStartLogOut(AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, System.AsyncCallback callback, object asyncState);
        
        bool EndStartLogOut(out string attributeString, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/CheckLoginAccess", ReplyAction="http://tempuri.org/ILoginService/CheckLoginAccessResponse")]
        bool CheckLoginAccess(out AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum loginStatus, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut, out string attributeString, string store, string app, string item, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILoginService/CheckLoginAccess", ReplyAction="http://tempuri.org/ILoginService/CheckLoginAccessResponse")]
        System.IAsyncResult BeginCheckLoginAccess(string store, string app, string item, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckLoginAccess(out AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum loginStatus, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut, out string attributeString, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/CheckLoginStatusAndAuthorization", ReplyAction="http://tempuri.org/ILoginService/CheckLoginStatusAndAuthorizationResponse")]
        bool CheckLoginStatusAndAuthorization(out AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum loginStatus, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType authorizationType, out string outputString, string azManStore, string azManApplication, string azManItem, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILoginService/CheckLoginStatusAndAuthorization", ReplyAction="http://tempuri.org/ILoginService/CheckLoginStatusAndAuthorizationResponse")]
        System.IAsyncResult BeginCheckLoginStatusAndAuthorization(string azManStore, string azManApplication, string azManItem, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckLoginStatusAndAuthorization(out AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum loginStatus, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType authorizationType, out string outputString, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/ChangePwd", ReplyAction="http://tempuri.org/ILoginService/ChangePwdResponse")]
        bool ChangePwd(out string statusMessages, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, string current, string renewed, string confirmation);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILoginService/ChangePwd", ReplyAction="http://tempuri.org/ILoginService/ChangePwdResponse")]
        System.IAsyncResult BeginChangePwd(AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, string current, string renewed, string confirmation, System.AsyncCallback callback, object asyncState);
        
        bool EndChangePwd(out string statusMessages, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/ChangePwdEx", ReplyAction="http://tempuri.org/ILoginService/ChangePwdExResponse")]
        bool ChangePwdEx(out string statusType, out string statusMessage, out string statusTrace, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, string current, string renewed, string confirmation);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILoginService/ChangePwdEx", ReplyAction="http://tempuri.org/ILoginService/ChangePwdExResponse")]
        System.IAsyncResult BeginChangePwdEx(AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, string current, string renewed, string confirmation, System.AsyncCallback callback, object asyncState);
        
        bool EndChangePwdEx(out string statusType, out string statusMessage, out string statusTrace, System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoginServiceChannel : AzManLoginWebServicesTest.LoginSvcRef.ILoginService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string output {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StartLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StartLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.DBUser user {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.DBUser)(this.results[0]));
            }
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType)(this.results[1]));
            }
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.LoginInfo)(this.results[2]));
            }
        }
        
        public string attributeString {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StartLoginEncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StartLoginEncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.DBUser user {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.DBUser)(this.results[0]));
            }
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType)(this.results[1]));
            }
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.LoginInfo)(this.results[2]));
            }
        }
        
        public string attributeString {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.DBUser dbUser {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.DBUser)(this.results[0]));
            }
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.LoginInfo)(this.results[1]));
            }
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType authorizationType {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType)(this.results[2]));
            }
        }
        
        public string outputString {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.DBUser user {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.DBUser)(this.results[0]));
            }
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.LoginInfo)(this.results[1]));
            }
        }
        
        public string attributeString {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLoginByIdAndUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLoginByIdAndUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.DBUser dbUser {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.DBUser)(this.results[0]));
            }
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.LoginInfo)(this.results[1]));
            }
        }
        
        public string outputString {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevalidateLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevalidateLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.DBUser user {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.DBUser)(this.results[0]));
            }
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.LoginInfo)(this.results[1]));
            }
        }
        
        public string attributeString {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StartLogOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StartLogOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string attributeString {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckLoginAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckLoginAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum loginStatus {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum)(this.results[0]));
            }
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType)(this.results[1]));
            }
        }
        
        public string attributeString {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckLoginStatusAndAuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckLoginStatusAndAuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum loginStatus {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum)(this.results[0]));
            }
        }
        
        public AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType authorizationType {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType)(this.results[1]));
            }
        }
        
        public string outputString {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangePwdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangePwdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string statusMessages {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangePwdExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangePwdExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string statusType {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string statusMessage {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string statusTrace {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginServiceClient : System.ServiceModel.ClientBase<AzManLoginWebServicesTest.LoginSvcRef.ILoginService>, AzManLoginWebServicesTest.LoginSvcRef.ILoginService {
        
        private BeginOperationDelegate onBeginTestDelegate;
        
        private EndOperationDelegate onEndTestDelegate;
        
        private System.Threading.SendOrPostCallback onTestCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartLoginDelegate;
        
        private EndOperationDelegate onEndStartLoginDelegate;
        
        private System.Threading.SendOrPostCallback onStartLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartLoginEncDelegate;
        
        private EndOperationDelegate onEndStartLoginEncDelegate;
        
        private System.Threading.SendOrPostCallback onStartLoginEncCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateLoginDelegate;
        
        private EndOperationDelegate onEndCreateLoginDelegate;
        
        private System.Threading.SendOrPostCallback onCreateLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLoginDelegate;
        
        private EndOperationDelegate onEndGetLoginDelegate;
        
        private System.Threading.SendOrPostCallback onGetLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLoginByIdAndUserDelegate;
        
        private EndOperationDelegate onEndGetLoginByIdAndUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetLoginByIdAndUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevalidateLoginDelegate;
        
        private EndOperationDelegate onEndRevalidateLoginDelegate;
        
        private System.Threading.SendOrPostCallback onRevalidateLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartLogOutDelegate;
        
        private EndOperationDelegate onEndStartLogOutDelegate;
        
        private System.Threading.SendOrPostCallback onStartLogOutCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckLoginAccessDelegate;
        
        private EndOperationDelegate onEndCheckLoginAccessDelegate;
        
        private System.Threading.SendOrPostCallback onCheckLoginAccessCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckLoginStatusAndAuthorizationDelegate;
        
        private EndOperationDelegate onEndCheckLoginStatusAndAuthorizationDelegate;
        
        private System.Threading.SendOrPostCallback onCheckLoginStatusAndAuthorizationCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangePwdDelegate;
        
        private EndOperationDelegate onEndChangePwdDelegate;
        
        private System.Threading.SendOrPostCallback onChangePwdCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangePwdExDelegate;
        
        private EndOperationDelegate onEndChangePwdExDelegate;
        
        private System.Threading.SendOrPostCallback onChangePwdExCompletedDelegate;
        
        public LoginServiceClient() {
        }
        
        public LoginServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoginServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoginServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoginServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<TestCompletedEventArgs> TestCompleted;
        
        public event System.EventHandler<StartLoginCompletedEventArgs> StartLoginCompleted;
        
        public event System.EventHandler<StartLoginEncCompletedEventArgs> StartLoginEncCompleted;
        
        public event System.EventHandler<CreateLoginCompletedEventArgs> CreateLoginCompleted;
        
        public event System.EventHandler<GetLoginCompletedEventArgs> GetLoginCompleted;
        
        public event System.EventHandler<GetLoginByIdAndUserCompletedEventArgs> GetLoginByIdAndUserCompleted;
        
        public event System.EventHandler<RevalidateLoginCompletedEventArgs> RevalidateLoginCompleted;
        
        public event System.EventHandler<StartLogOutCompletedEventArgs> StartLogOutCompleted;
        
        public event System.EventHandler<CheckLoginAccessCompletedEventArgs> CheckLoginAccessCompleted;
        
        public event System.EventHandler<CheckLoginStatusAndAuthorizationCompletedEventArgs> CheckLoginStatusAndAuthorizationCompleted;
        
        public event System.EventHandler<ChangePwdCompletedEventArgs> ChangePwdCompleted;
        
        public event System.EventHandler<ChangePwdExCompletedEventArgs> ChangePwdExCompleted;
        
        public bool Test(out string output, string input) {
            return base.Channel.Test(out output, input);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTest(string input, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTest(input, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndTest(out string output, System.IAsyncResult result) {
            return base.Channel.EndTest(out output, result);
        }
        
        private System.IAsyncResult OnBeginTest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string input = ((string)(inValues[0]));
            return this.BeginTest(input, callback, asyncState);
        }
        
        private object[] OnEndTest(System.IAsyncResult result) {
            string output = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndTest(out output, result);
            return new object[] {
                    output,
                    retVal};
        }
        
        private void OnTestCompleted(object state) {
            if ((this.TestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCompleted(this, new TestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestAsync(string input) {
            this.TestAsync(input, null);
        }
        
        public void TestAsync(string input, object userState) {
            if ((this.onBeginTestDelegate == null)) {
                this.onBeginTestDelegate = new BeginOperationDelegate(this.OnBeginTest);
            }
            if ((this.onEndTestDelegate == null)) {
                this.onEndTestDelegate = new EndOperationDelegate(this.OnEndTest);
            }
            if ((this.onTestCompletedDelegate == null)) {
                this.onTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCompleted);
            }
            base.InvokeAsync(this.onBeginTestDelegate, new object[] {
                        input}, this.onEndTestDelegate, this.onTestCompletedDelegate, userState);
        }
        
        public bool StartLogin(out AzManLoginWebServicesTest.LoginSvcRef.DBUser user, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, out string attributeString, string userName, string pwd, string appName, string store, string app, string requiredItem) {
            return base.Channel.StartLogin(out user, out aut, out login, out attributeString, userName, pwd, appName, store, app, requiredItem);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginStartLogin(string userName, string pwd, string appName, string store, string app, string requiredItem, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartLogin(userName, pwd, appName, store, app, requiredItem, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndStartLogin(out AzManLoginWebServicesTest.LoginSvcRef.DBUser user, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, out string attributeString, System.IAsyncResult result) {
            return base.Channel.EndStartLogin(out user, out aut, out login, out attributeString, result);
        }
        
        private System.IAsyncResult OnBeginStartLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string pwd = ((string)(inValues[1]));
            string appName = ((string)(inValues[2]));
            string store = ((string)(inValues[3]));
            string app = ((string)(inValues[4]));
            string requiredItem = ((string)(inValues[5]));
            return this.BeginStartLogin(userName, pwd, appName, store, app, requiredItem, callback, asyncState);
        }
        
        private object[] OnEndStartLogin(System.IAsyncResult result) {
            AzManLoginWebServicesTest.LoginSvcRef.DBUser user = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.DBUser>();
            AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType>();
            AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.LoginInfo>();
            string attributeString = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndStartLogin(out user, out aut, out login, out attributeString, result);
            return new object[] {
                    user,
                    aut,
                    login,
                    attributeString,
                    retVal};
        }
        
        private void OnStartLoginCompleted(object state) {
            if ((this.StartLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartLoginCompleted(this, new StartLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartLoginAsync(string userName, string pwd, string appName, string store, string app, string requiredItem) {
            this.StartLoginAsync(userName, pwd, appName, store, app, requiredItem, null);
        }
        
        public void StartLoginAsync(string userName, string pwd, string appName, string store, string app, string requiredItem, object userState) {
            if ((this.onBeginStartLoginDelegate == null)) {
                this.onBeginStartLoginDelegate = new BeginOperationDelegate(this.OnBeginStartLogin);
            }
            if ((this.onEndStartLoginDelegate == null)) {
                this.onEndStartLoginDelegate = new EndOperationDelegate(this.OnEndStartLogin);
            }
            if ((this.onStartLoginCompletedDelegate == null)) {
                this.onStartLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartLoginCompleted);
            }
            base.InvokeAsync(this.onBeginStartLoginDelegate, new object[] {
                        userName,
                        pwd,
                        appName,
                        store,
                        app,
                        requiredItem}, this.onEndStartLoginDelegate, this.onStartLoginCompletedDelegate, userState);
        }
        
        public bool StartLoginEnc(out AzManLoginWebServicesTest.LoginSvcRef.DBUser user, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, out string attributeString, string encodedUserName, string appName, string store, string app, string requiredItem) {
            return base.Channel.StartLoginEnc(out user, out aut, out login, out attributeString, encodedUserName, appName, store, app, requiredItem);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginStartLoginEnc(string encodedUserName, string appName, string store, string app, string requiredItem, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartLoginEnc(encodedUserName, appName, store, app, requiredItem, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndStartLoginEnc(out AzManLoginWebServicesTest.LoginSvcRef.DBUser user, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, out string attributeString, System.IAsyncResult result) {
            return base.Channel.EndStartLoginEnc(out user, out aut, out login, out attributeString, result);
        }
        
        private System.IAsyncResult OnBeginStartLoginEnc(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string encodedUserName = ((string)(inValues[0]));
            string appName = ((string)(inValues[1]));
            string store = ((string)(inValues[2]));
            string app = ((string)(inValues[3]));
            string requiredItem = ((string)(inValues[4]));
            return this.BeginStartLoginEnc(encodedUserName, appName, store, app, requiredItem, callback, asyncState);
        }
        
        private object[] OnEndStartLoginEnc(System.IAsyncResult result) {
            AzManLoginWebServicesTest.LoginSvcRef.DBUser user = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.DBUser>();
            AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType>();
            AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.LoginInfo>();
            string attributeString = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndStartLoginEnc(out user, out aut, out login, out attributeString, result);
            return new object[] {
                    user,
                    aut,
                    login,
                    attributeString,
                    retVal};
        }
        
        private void OnStartLoginEncCompleted(object state) {
            if ((this.StartLoginEncCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartLoginEncCompleted(this, new StartLoginEncCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartLoginEncAsync(string encodedUserName, string appName, string store, string app, string requiredItem) {
            this.StartLoginEncAsync(encodedUserName, appName, store, app, requiredItem, null);
        }
        
        public void StartLoginEncAsync(string encodedUserName, string appName, string store, string app, string requiredItem, object userState) {
            if ((this.onBeginStartLoginEncDelegate == null)) {
                this.onBeginStartLoginEncDelegate = new BeginOperationDelegate(this.OnBeginStartLoginEnc);
            }
            if ((this.onEndStartLoginEncDelegate == null)) {
                this.onEndStartLoginEncDelegate = new EndOperationDelegate(this.OnEndStartLoginEnc);
            }
            if ((this.onStartLoginEncCompletedDelegate == null)) {
                this.onStartLoginEncCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartLoginEncCompleted);
            }
            base.InvokeAsync(this.onBeginStartLoginEncDelegate, new object[] {
                        encodedUserName,
                        appName,
                        store,
                        app,
                        requiredItem}, this.onEndStartLoginEncDelegate, this.onStartLoginEncCompletedDelegate, userState);
        }
        
        public bool CreateLogin(out AzManLoginWebServicesTest.LoginSvcRef.DBUser dbUser, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType authorizationType, out string outputString, string userName, string password, string clientApplication, string azManStore, string azManApplication, string azManItem) {
            return base.Channel.CreateLogin(out dbUser, out loginInfo, out authorizationType, out outputString, userName, password, clientApplication, azManStore, azManApplication, azManItem);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateLogin(string userName, string password, string clientApplication, string azManStore, string azManApplication, string azManItem, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateLogin(userName, password, clientApplication, azManStore, azManApplication, azManItem, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCreateLogin(out AzManLoginWebServicesTest.LoginSvcRef.DBUser dbUser, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType authorizationType, out string outputString, System.IAsyncResult result) {
            return base.Channel.EndCreateLogin(out dbUser, out loginInfo, out authorizationType, out outputString, result);
        }
        
        private System.IAsyncResult OnBeginCreateLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string clientApplication = ((string)(inValues[2]));
            string azManStore = ((string)(inValues[3]));
            string azManApplication = ((string)(inValues[4]));
            string azManItem = ((string)(inValues[5]));
            return this.BeginCreateLogin(userName, password, clientApplication, azManStore, azManApplication, azManItem, callback, asyncState);
        }
        
        private object[] OnEndCreateLogin(System.IAsyncResult result) {
            AzManLoginWebServicesTest.LoginSvcRef.DBUser dbUser = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.DBUser>();
            AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.LoginInfo>();
            AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType authorizationType = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType>();
            string outputString = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndCreateLogin(out dbUser, out loginInfo, out authorizationType, out outputString, result);
            return new object[] {
                    dbUser,
                    loginInfo,
                    authorizationType,
                    outputString,
                    retVal};
        }
        
        private void OnCreateLoginCompleted(object state) {
            if ((this.CreateLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateLoginCompleted(this, new CreateLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateLoginAsync(string userName, string password, string clientApplication, string azManStore, string azManApplication, string azManItem) {
            this.CreateLoginAsync(userName, password, clientApplication, azManStore, azManApplication, azManItem, null);
        }
        
        public void CreateLoginAsync(string userName, string password, string clientApplication, string azManStore, string azManApplication, string azManItem, object userState) {
            if ((this.onBeginCreateLoginDelegate == null)) {
                this.onBeginCreateLoginDelegate = new BeginOperationDelegate(this.OnBeginCreateLogin);
            }
            if ((this.onEndCreateLoginDelegate == null)) {
                this.onEndCreateLoginDelegate = new EndOperationDelegate(this.OnEndCreateLogin);
            }
            if ((this.onCreateLoginCompletedDelegate == null)) {
                this.onCreateLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateLoginCompleted);
            }
            base.InvokeAsync(this.onBeginCreateLoginDelegate, new object[] {
                        userName,
                        password,
                        clientApplication,
                        azManStore,
                        azManApplication,
                        azManItem}, this.onEndCreateLoginDelegate, this.onCreateLoginCompletedDelegate, userState);
        }
        
        public bool GetLogin(out AzManLoginWebServicesTest.LoginSvcRef.DBUser user, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, out string attributeString, string loginId, string userName, string appName) {
            return base.Channel.GetLogin(out user, out login, out attributeString, loginId, userName, appName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLogin(string loginId, string userName, string appName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLogin(loginId, userName, appName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndGetLogin(out AzManLoginWebServicesTest.LoginSvcRef.DBUser user, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, out string attributeString, System.IAsyncResult result) {
            return base.Channel.EndGetLogin(out user, out login, out attributeString, result);
        }
        
        private System.IAsyncResult OnBeginGetLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string loginId = ((string)(inValues[0]));
            string userName = ((string)(inValues[1]));
            string appName = ((string)(inValues[2]));
            return this.BeginGetLogin(loginId, userName, appName, callback, asyncState);
        }
        
        private object[] OnEndGetLogin(System.IAsyncResult result) {
            AzManLoginWebServicesTest.LoginSvcRef.DBUser user = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.DBUser>();
            AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.LoginInfo>();
            string attributeString = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndGetLogin(out user, out login, out attributeString, result);
            return new object[] {
                    user,
                    login,
                    attributeString,
                    retVal};
        }
        
        private void OnGetLoginCompleted(object state) {
            if ((this.GetLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLoginCompleted(this, new GetLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLoginAsync(string loginId, string userName, string appName) {
            this.GetLoginAsync(loginId, userName, appName, null);
        }
        
        public void GetLoginAsync(string loginId, string userName, string appName, object userState) {
            if ((this.onBeginGetLoginDelegate == null)) {
                this.onBeginGetLoginDelegate = new BeginOperationDelegate(this.OnBeginGetLogin);
            }
            if ((this.onEndGetLoginDelegate == null)) {
                this.onEndGetLoginDelegate = new EndOperationDelegate(this.OnEndGetLogin);
            }
            if ((this.onGetLoginCompletedDelegate == null)) {
                this.onGetLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLoginCompleted);
            }
            base.InvokeAsync(this.onBeginGetLoginDelegate, new object[] {
                        loginId,
                        userName,
                        appName}, this.onEndGetLoginDelegate, this.onGetLoginCompletedDelegate, userState);
        }
        
        public bool GetLoginByIdAndUser(out AzManLoginWebServicesTest.LoginSvcRef.DBUser dbUser, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo, out string outputString, string loginId, string userName) {
            return base.Channel.GetLoginByIdAndUser(out dbUser, out loginInfo, out outputString, loginId, userName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLoginByIdAndUser(string loginId, string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLoginByIdAndUser(loginId, userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndGetLoginByIdAndUser(out AzManLoginWebServicesTest.LoginSvcRef.DBUser dbUser, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo, out string outputString, System.IAsyncResult result) {
            return base.Channel.EndGetLoginByIdAndUser(out dbUser, out loginInfo, out outputString, result);
        }
        
        private System.IAsyncResult OnBeginGetLoginByIdAndUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string loginId = ((string)(inValues[0]));
            string userName = ((string)(inValues[1]));
            return this.BeginGetLoginByIdAndUser(loginId, userName, callback, asyncState);
        }
        
        private object[] OnEndGetLoginByIdAndUser(System.IAsyncResult result) {
            AzManLoginWebServicesTest.LoginSvcRef.DBUser dbUser = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.DBUser>();
            AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.LoginInfo>();
            string outputString = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndGetLoginByIdAndUser(out dbUser, out loginInfo, out outputString, result);
            return new object[] {
                    dbUser,
                    loginInfo,
                    outputString,
                    retVal};
        }
        
        private void OnGetLoginByIdAndUserCompleted(object state) {
            if ((this.GetLoginByIdAndUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLoginByIdAndUserCompleted(this, new GetLoginByIdAndUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLoginByIdAndUserAsync(string loginId, string userName) {
            this.GetLoginByIdAndUserAsync(loginId, userName, null);
        }
        
        public void GetLoginByIdAndUserAsync(string loginId, string userName, object userState) {
            if ((this.onBeginGetLoginByIdAndUserDelegate == null)) {
                this.onBeginGetLoginByIdAndUserDelegate = new BeginOperationDelegate(this.OnBeginGetLoginByIdAndUser);
            }
            if ((this.onEndGetLoginByIdAndUserDelegate == null)) {
                this.onEndGetLoginByIdAndUserDelegate = new EndOperationDelegate(this.OnEndGetLoginByIdAndUser);
            }
            if ((this.onGetLoginByIdAndUserCompletedDelegate == null)) {
                this.onGetLoginByIdAndUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLoginByIdAndUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetLoginByIdAndUserDelegate, new object[] {
                        loginId,
                        userName}, this.onEndGetLoginByIdAndUserDelegate, this.onGetLoginByIdAndUserCompletedDelegate, userState);
        }
        
        public bool RevalidateLogin(out AzManLoginWebServicesTest.LoginSvcRef.DBUser user, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, out string attributeString, string loginId, string userName, string pwd, string appName) {
            return base.Channel.RevalidateLogin(out user, out login, out attributeString, loginId, userName, pwd, appName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevalidateLogin(string loginId, string userName, string pwd, string appName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevalidateLogin(loginId, userName, pwd, appName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndRevalidateLogin(out AzManLoginWebServicesTest.LoginSvcRef.DBUser user, out AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, out string attributeString, System.IAsyncResult result) {
            return base.Channel.EndRevalidateLogin(out user, out login, out attributeString, result);
        }
        
        private System.IAsyncResult OnBeginRevalidateLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string loginId = ((string)(inValues[0]));
            string userName = ((string)(inValues[1]));
            string pwd = ((string)(inValues[2]));
            string appName = ((string)(inValues[3]));
            return this.BeginRevalidateLogin(loginId, userName, pwd, appName, callback, asyncState);
        }
        
        private object[] OnEndRevalidateLogin(System.IAsyncResult result) {
            AzManLoginWebServicesTest.LoginSvcRef.DBUser user = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.DBUser>();
            AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.LoginInfo>();
            string attributeString = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndRevalidateLogin(out user, out login, out attributeString, result);
            return new object[] {
                    user,
                    login,
                    attributeString,
                    retVal};
        }
        
        private void OnRevalidateLoginCompleted(object state) {
            if ((this.RevalidateLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevalidateLoginCompleted(this, new RevalidateLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevalidateLoginAsync(string loginId, string userName, string pwd, string appName) {
            this.RevalidateLoginAsync(loginId, userName, pwd, appName, null);
        }
        
        public void RevalidateLoginAsync(string loginId, string userName, string pwd, string appName, object userState) {
            if ((this.onBeginRevalidateLoginDelegate == null)) {
                this.onBeginRevalidateLoginDelegate = new BeginOperationDelegate(this.OnBeginRevalidateLogin);
            }
            if ((this.onEndRevalidateLoginDelegate == null)) {
                this.onEndRevalidateLoginDelegate = new EndOperationDelegate(this.OnEndRevalidateLogin);
            }
            if ((this.onRevalidateLoginCompletedDelegate == null)) {
                this.onRevalidateLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevalidateLoginCompleted);
            }
            base.InvokeAsync(this.onBeginRevalidateLoginDelegate, new object[] {
                        loginId,
                        userName,
                        pwd,
                        appName}, this.onEndRevalidateLoginDelegate, this.onRevalidateLoginCompletedDelegate, userState);
        }
        
        public bool StartLogOut(out string attributeString, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login) {
            return base.Channel.StartLogOut(out attributeString, login);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginStartLogOut(AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartLogOut(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndStartLogOut(out string attributeString, System.IAsyncResult result) {
            return base.Channel.EndStartLogOut(out attributeString, result);
        }
        
        private System.IAsyncResult OnBeginStartLogOut(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login = ((AzManLoginWebServicesTest.LoginSvcRef.LoginInfo)(inValues[0]));
            return this.BeginStartLogOut(login, callback, asyncState);
        }
        
        private object[] OnEndStartLogOut(System.IAsyncResult result) {
            string attributeString = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndStartLogOut(out attributeString, result);
            return new object[] {
                    attributeString,
                    retVal};
        }
        
        private void OnStartLogOutCompleted(object state) {
            if ((this.StartLogOutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartLogOutCompleted(this, new StartLogOutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartLogOutAsync(AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login) {
            this.StartLogOutAsync(login, null);
        }
        
        public void StartLogOutAsync(AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, object userState) {
            if ((this.onBeginStartLogOutDelegate == null)) {
                this.onBeginStartLogOutDelegate = new BeginOperationDelegate(this.OnBeginStartLogOut);
            }
            if ((this.onEndStartLogOutDelegate == null)) {
                this.onEndStartLogOutDelegate = new EndOperationDelegate(this.OnEndStartLogOut);
            }
            if ((this.onStartLogOutCompletedDelegate == null)) {
                this.onStartLogOutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartLogOutCompleted);
            }
            base.InvokeAsync(this.onBeginStartLogOutDelegate, new object[] {
                        login}, this.onEndStartLogOutDelegate, this.onStartLogOutCompletedDelegate, userState);
        }
        
        public bool CheckLoginAccess(out AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum loginStatus, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut, out string attributeString, string store, string app, string item, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo) {
            return base.Channel.CheckLoginAccess(out loginStatus, out aut, out attributeString, store, app, item, loginInfo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckLoginAccess(string store, string app, string item, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckLoginAccess(store, app, item, loginInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCheckLoginAccess(out AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum loginStatus, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut, out string attributeString, System.IAsyncResult result) {
            return base.Channel.EndCheckLoginAccess(out loginStatus, out aut, out attributeString, result);
        }
        
        private System.IAsyncResult OnBeginCheckLoginAccess(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string store = ((string)(inValues[0]));
            string app = ((string)(inValues[1]));
            string item = ((string)(inValues[2]));
            AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo = ((AzManLoginWebServicesTest.LoginSvcRef.LoginInfo)(inValues[3]));
            return this.BeginCheckLoginAccess(store, app, item, loginInfo, callback, asyncState);
        }
        
        private object[] OnEndCheckLoginAccess(System.IAsyncResult result) {
            AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum loginStatus = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum>();
            AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType aut = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType>();
            string attributeString = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndCheckLoginAccess(out loginStatus, out aut, out attributeString, result);
            return new object[] {
                    loginStatus,
                    aut,
                    attributeString,
                    retVal};
        }
        
        private void OnCheckLoginAccessCompleted(object state) {
            if ((this.CheckLoginAccessCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckLoginAccessCompleted(this, new CheckLoginAccessCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckLoginAccessAsync(string store, string app, string item, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo) {
            this.CheckLoginAccessAsync(store, app, item, loginInfo, null);
        }
        
        public void CheckLoginAccessAsync(string store, string app, string item, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo, object userState) {
            if ((this.onBeginCheckLoginAccessDelegate == null)) {
                this.onBeginCheckLoginAccessDelegate = new BeginOperationDelegate(this.OnBeginCheckLoginAccess);
            }
            if ((this.onEndCheckLoginAccessDelegate == null)) {
                this.onEndCheckLoginAccessDelegate = new EndOperationDelegate(this.OnEndCheckLoginAccess);
            }
            if ((this.onCheckLoginAccessCompletedDelegate == null)) {
                this.onCheckLoginAccessCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckLoginAccessCompleted);
            }
            base.InvokeAsync(this.onBeginCheckLoginAccessDelegate, new object[] {
                        store,
                        app,
                        item,
                        loginInfo}, this.onEndCheckLoginAccessDelegate, this.onCheckLoginAccessCompletedDelegate, userState);
        }
        
        public bool CheckLoginStatusAndAuthorization(out AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum loginStatus, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType authorizationType, out string outputString, string azManStore, string azManApplication, string azManItem, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo) {
            return base.Channel.CheckLoginStatusAndAuthorization(out loginStatus, out authorizationType, out outputString, azManStore, azManApplication, azManItem, loginInfo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckLoginStatusAndAuthorization(string azManStore, string azManApplication, string azManItem, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckLoginStatusAndAuthorization(azManStore, azManApplication, azManItem, loginInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCheckLoginStatusAndAuthorization(out AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum loginStatus, out AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType authorizationType, out string outputString, System.IAsyncResult result) {
            return base.Channel.EndCheckLoginStatusAndAuthorization(out loginStatus, out authorizationType, out outputString, result);
        }
        
        private System.IAsyncResult OnBeginCheckLoginStatusAndAuthorization(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string azManStore = ((string)(inValues[0]));
            string azManApplication = ((string)(inValues[1]));
            string azManItem = ((string)(inValues[2]));
            AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo = ((AzManLoginWebServicesTest.LoginSvcRef.LoginInfo)(inValues[3]));
            return this.BeginCheckLoginStatusAndAuthorization(azManStore, azManApplication, azManItem, loginInfo, callback, asyncState);
        }
        
        private object[] OnEndCheckLoginStatusAndAuthorization(System.IAsyncResult result) {
            AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum loginStatus = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.LoginStatusEnum>();
            AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType authorizationType = this.GetDefaultValueForInitialization<AzManLoginWebServicesTest.LoginSvcRef.AuthorizationType>();
            string outputString = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndCheckLoginStatusAndAuthorization(out loginStatus, out authorizationType, out outputString, result);
            return new object[] {
                    loginStatus,
                    authorizationType,
                    outputString,
                    retVal};
        }
        
        private void OnCheckLoginStatusAndAuthorizationCompleted(object state) {
            if ((this.CheckLoginStatusAndAuthorizationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckLoginStatusAndAuthorizationCompleted(this, new CheckLoginStatusAndAuthorizationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckLoginStatusAndAuthorizationAsync(string azManStore, string azManApplication, string azManItem, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo) {
            this.CheckLoginStatusAndAuthorizationAsync(azManStore, azManApplication, azManItem, loginInfo, null);
        }
        
        public void CheckLoginStatusAndAuthorizationAsync(string azManStore, string azManApplication, string azManItem, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo loginInfo, object userState) {
            if ((this.onBeginCheckLoginStatusAndAuthorizationDelegate == null)) {
                this.onBeginCheckLoginStatusAndAuthorizationDelegate = new BeginOperationDelegate(this.OnBeginCheckLoginStatusAndAuthorization);
            }
            if ((this.onEndCheckLoginStatusAndAuthorizationDelegate == null)) {
                this.onEndCheckLoginStatusAndAuthorizationDelegate = new EndOperationDelegate(this.OnEndCheckLoginStatusAndAuthorization);
            }
            if ((this.onCheckLoginStatusAndAuthorizationCompletedDelegate == null)) {
                this.onCheckLoginStatusAndAuthorizationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckLoginStatusAndAuthorizationCompleted);
            }
            base.InvokeAsync(this.onBeginCheckLoginStatusAndAuthorizationDelegate, new object[] {
                        azManStore,
                        azManApplication,
                        azManItem,
                        loginInfo}, this.onEndCheckLoginStatusAndAuthorizationDelegate, this.onCheckLoginStatusAndAuthorizationCompletedDelegate, userState);
        }
        
        public bool ChangePwd(out string statusMessages, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, string current, string renewed, string confirmation) {
            return base.Channel.ChangePwd(out statusMessages, login, current, renewed, confirmation);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChangePwd(AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, string current, string renewed, string confirmation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangePwd(login, current, renewed, confirmation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndChangePwd(out string statusMessages, System.IAsyncResult result) {
            return base.Channel.EndChangePwd(out statusMessages, result);
        }
        
        private System.IAsyncResult OnBeginChangePwd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login = ((AzManLoginWebServicesTest.LoginSvcRef.LoginInfo)(inValues[0]));
            string current = ((string)(inValues[1]));
            string renewed = ((string)(inValues[2]));
            string confirmation = ((string)(inValues[3]));
            return this.BeginChangePwd(login, current, renewed, confirmation, callback, asyncState);
        }
        
        private object[] OnEndChangePwd(System.IAsyncResult result) {
            string statusMessages = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndChangePwd(out statusMessages, result);
            return new object[] {
                    statusMessages,
                    retVal};
        }
        
        private void OnChangePwdCompleted(object state) {
            if ((this.ChangePwdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangePwdCompleted(this, new ChangePwdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangePwdAsync(AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, string current, string renewed, string confirmation) {
            this.ChangePwdAsync(login, current, renewed, confirmation, null);
        }
        
        public void ChangePwdAsync(AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, string current, string renewed, string confirmation, object userState) {
            if ((this.onBeginChangePwdDelegate == null)) {
                this.onBeginChangePwdDelegate = new BeginOperationDelegate(this.OnBeginChangePwd);
            }
            if ((this.onEndChangePwdDelegate == null)) {
                this.onEndChangePwdDelegate = new EndOperationDelegate(this.OnEndChangePwd);
            }
            if ((this.onChangePwdCompletedDelegate == null)) {
                this.onChangePwdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangePwdCompleted);
            }
            base.InvokeAsync(this.onBeginChangePwdDelegate, new object[] {
                        login,
                        current,
                        renewed,
                        confirmation}, this.onEndChangePwdDelegate, this.onChangePwdCompletedDelegate, userState);
        }
        
        public bool ChangePwdEx(out string statusType, out string statusMessage, out string statusTrace, AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, string current, string renewed, string confirmation) {
            return base.Channel.ChangePwdEx(out statusType, out statusMessage, out statusTrace, login, current, renewed, confirmation);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChangePwdEx(AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, string current, string renewed, string confirmation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangePwdEx(login, current, renewed, confirmation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndChangePwdEx(out string statusType, out string statusMessage, out string statusTrace, System.IAsyncResult result) {
            return base.Channel.EndChangePwdEx(out statusType, out statusMessage, out statusTrace, result);
        }
        
        private System.IAsyncResult OnBeginChangePwdEx(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login = ((AzManLoginWebServicesTest.LoginSvcRef.LoginInfo)(inValues[0]));
            string current = ((string)(inValues[1]));
            string renewed = ((string)(inValues[2]));
            string confirmation = ((string)(inValues[3]));
            return this.BeginChangePwdEx(login, current, renewed, confirmation, callback, asyncState);
        }
        
        private object[] OnEndChangePwdEx(System.IAsyncResult result) {
            string statusType = this.GetDefaultValueForInitialization<string>();
            string statusMessage = this.GetDefaultValueForInitialization<string>();
            string statusTrace = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndChangePwdEx(out statusType, out statusMessage, out statusTrace, result);
            return new object[] {
                    statusType,
                    statusMessage,
                    statusTrace,
                    retVal};
        }
        
        private void OnChangePwdExCompleted(object state) {
            if ((this.ChangePwdExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangePwdExCompleted(this, new ChangePwdExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangePwdExAsync(AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, string current, string renewed, string confirmation) {
            this.ChangePwdExAsync(login, current, renewed, confirmation, null);
        }
        
        public void ChangePwdExAsync(AzManLoginWebServicesTest.LoginSvcRef.LoginInfo login, string current, string renewed, string confirmation, object userState) {
            if ((this.onBeginChangePwdExDelegate == null)) {
                this.onBeginChangePwdExDelegate = new BeginOperationDelegate(this.OnBeginChangePwdEx);
            }
            if ((this.onEndChangePwdExDelegate == null)) {
                this.onEndChangePwdExDelegate = new EndOperationDelegate(this.OnEndChangePwdEx);
            }
            if ((this.onChangePwdExCompletedDelegate == null)) {
                this.onChangePwdExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangePwdExCompleted);
            }
            base.InvokeAsync(this.onBeginChangePwdExDelegate, new object[] {
                        login,
                        current,
                        renewed,
                        confirmation}, this.onEndChangePwdExDelegate, this.onChangePwdExCompletedDelegate, userState);
        }
    }
}
