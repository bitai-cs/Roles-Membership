//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AzManLoginWebServices.DirectSvcRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DBUser", Namespace="http://schemas.datacontract.org/2004/07/NetSqlAzMan.Cache")]
    [System.SerializableAttribute()]
    public partial class DBUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttributeStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttributeString {
            get {
                return this.AttributeStringField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributeStringField, value) != true)) {
                    this.AttributeStringField = value;
                    this.RaisePropertyChanged("AttributeString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SqlAzManDBUser", Namespace="http://NetSqlAzMan/ServiceModel", IsReference=true)]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.KeyValuePair<string, object>[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.KeyValuePair<string, object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.KeyValuePair<string, string>[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.KeyValuePair<string, string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AzManLoginWebServices.DirectSvcRef.DBUser))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AzManLoginWebServices.DirectSvcRef.AuthorizationType))]
    public partial class SqlAzManDBUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, object> CustomColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object CustomSidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLDAPObjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LDAPDomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, object> CustomColumns {
            get {
                return this.CustomColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomColumnsField, value) != true)) {
                    this.CustomColumnsField = value;
                    this.RaisePropertyChanged("CustomColumns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object CustomSid {
            get {
                return this.CustomSidField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomSidField, value) != true)) {
                    this.CustomSidField = value;
                    this.RaisePropertyChanged("CustomSid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLDAPObject {
            get {
                return this.IsLDAPObjectField;
            }
            set {
                if ((this.IsLDAPObjectField.Equals(value) != true)) {
                    this.IsLDAPObjectField = value;
                    this.RaisePropertyChanged("IsLDAPObject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LDAPDomain {
            get {
                return this.LDAPDomainField;
            }
            set {
                if ((object.ReferenceEquals(this.LDAPDomainField, value) != true)) {
                    this.LDAPDomainField = value;
                    this.RaisePropertyChanged("LDAPDomain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizationType", Namespace="http://NetSqlAzMan/ServiceModel")]
    public enum AuthorizationType : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Neutral = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Allow = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deny = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllowWithDelegation = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DirectSvcRef.IDirectService")]
    public interface IDirectService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/Test", ReplyAction="http://tempuri.org/IDirectService/TestResponse")]
        bool Test(out string output, string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/DirectGetDBUser", ReplyAction="http://tempuri.org/IDirectService/DirectGetDBUserResponse")]
        AzManLoginWebServices.DirectSvcRef.DBUser DirectGetDBUser(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/GetUser", ReplyAction="http://tempuri.org/IDirectService/GetUserResponse")]
        bool GetUser(out AzManLoginWebServices.DirectSvcRef.SqlAzManDBUser azManUser, out string statusType, out string status, out string stackTrace, string ldapDomain, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/DirectValidatePassword", ReplyAction="http://tempuri.org/IDirectService/DirectValidatePasswordResponse")]
        bool DirectValidatePassword(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/DirectCheckAccessForDatabaseUsersWithoutAttribu" +
            "tesRetrieve", ReplyAction="http://tempuri.org/IDirectService/DirectCheckAccessForDatabaseUsersWithoutAttribu" +
            "tesRetrieveResponse")]
        AzManLoginWebServices.DirectSvcRef.AuthorizationType DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve(string store, string app, string item, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/ChangePwd", ReplyAction="http://tempuri.org/IDirectService/ChangePwdResponse")]
        bool ChangePwd(out string statusMessage, AzManLoginWebServices.DirectSvcRef.DBUser user, string current, string renewed, string confirmation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/ChangePwdEx", ReplyAction="http://tempuri.org/IDirectService/ChangePwdExResponse")]
        bool ChangePwdEx(out string statusType, out string statusMessage, out string statusTrace, AzManLoginWebServices.DirectSvcRef.DBUser user, string current, string renewed, string confirmation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/ValidatePassword", ReplyAction="http://tempuri.org/IDirectService/ValidatePasswordResponse")]
        bool ValidatePassword(out AzManLoginWebServices.DirectSvcRef.SqlAzManDBUser azManUser, out string statusType, out string status, out string stackTrace, string domain, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/CheckAccessLDAP", ReplyAction="http://tempuri.org/IDirectService/CheckAccessLDAPResponse")]
        bool CheckAccessLDAP(out AzManLoginWebServices.DirectSvcRef.AuthorizationType authorization, out string statusType, out string status, out string stackTrace, string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool OperationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/CheckAccessLDAPEx", ReplyAction="http://tempuri.org/IDirectService/CheckAccessLDAPExResponse")]
        bool CheckAccessLDAPEx(out System.Collections.Generic.KeyValuePair<string, string>[] attributes, out AzManLoginWebServices.DirectSvcRef.AuthorizationType authorization, out string statusType, out string status, out string stackTrace, string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool OperationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDirectServiceChannel : AzManLoginWebServices.DirectSvcRef.IDirectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DirectServiceClient : System.ServiceModel.ClientBase<AzManLoginWebServices.DirectSvcRef.IDirectService>, AzManLoginWebServices.DirectSvcRef.IDirectService {
        
        public DirectServiceClient() {
        }
        
        public DirectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DirectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DirectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DirectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Test(out string output, string input) {
            return base.Channel.Test(out output, input);
        }
        
        public AzManLoginWebServices.DirectSvcRef.DBUser DirectGetDBUser(string userName) {
            return base.Channel.DirectGetDBUser(userName);
        }
        
        public bool GetUser(out AzManLoginWebServices.DirectSvcRef.SqlAzManDBUser azManUser, out string statusType, out string status, out string stackTrace, string ldapDomain, string userName) {
            return base.Channel.GetUser(out azManUser, out statusType, out status, out stackTrace, ldapDomain, userName);
        }
        
        public bool DirectValidatePassword(string userName, string password) {
            return base.Channel.DirectValidatePassword(userName, password);
        }
        
        public AzManLoginWebServices.DirectSvcRef.AuthorizationType DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve(string store, string app, string item, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            return base.Channel.DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve(store, app, item, DBuserSSid, validFor, operationsOnly, contextParameters);
        }
        
        public bool ChangePwd(out string statusMessage, AzManLoginWebServices.DirectSvcRef.DBUser user, string current, string renewed, string confirmation) {
            return base.Channel.ChangePwd(out statusMessage, user, current, renewed, confirmation);
        }
        
        public bool ChangePwdEx(out string statusType, out string statusMessage, out string statusTrace, AzManLoginWebServices.DirectSvcRef.DBUser user, string current, string renewed, string confirmation) {
            return base.Channel.ChangePwdEx(out statusType, out statusMessage, out statusTrace, user, current, renewed, confirmation);
        }
        
        public bool ValidatePassword(out AzManLoginWebServices.DirectSvcRef.SqlAzManDBUser azManUser, out string statusType, out string status, out string stackTrace, string domain, string userName, string password) {
            return base.Channel.ValidatePassword(out azManUser, out statusType, out status, out stackTrace, domain, userName, password);
        }
        
        public bool CheckAccessLDAP(out AzManLoginWebServices.DirectSvcRef.AuthorizationType authorization, out string statusType, out string status, out string stackTrace, string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool OperationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            return base.Channel.CheckAccessLDAP(out authorization, out statusType, out status, out stackTrace, StoreName, ApplicationName, ItemName, LDAPDomain, User, Sid, ValidFor, OperationsOnly, contextParameters);
        }
        
        public bool CheckAccessLDAPEx(out System.Collections.Generic.KeyValuePair<string, string>[] attributes, out AzManLoginWebServices.DirectSvcRef.AuthorizationType authorization, out string statusType, out string status, out string stackTrace, string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool OperationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            return base.Channel.CheckAccessLDAPEx(out attributes, out authorization, out statusType, out status, out stackTrace, StoreName, ApplicationName, ItemName, LDAPDomain, User, Sid, ValidFor, OperationsOnly, contextParameters);
        }
    }
}
