//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AzManWebServicesTest.DirectSvcRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DBUser", Namespace="http://schemas.datacontract.org/2004/07/NetSqlAzMan.Cache")]
    [System.SerializableAttribute()]
    public partial class DBUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttributeStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttributeString {
            get {
                return this.AttributeStringField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributeStringField, value) != true)) {
                    this.AttributeStringField = value;
                    this.RaisePropertyChanged("AttributeString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SqlAzManDBUser", Namespace="http://NetSqlAzMan/ServiceModel", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class SqlAzManDBUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizationType", Namespace="http://NetSqlAzMan/ServiceModel")]
    public enum AuthorizationType : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Neutral = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Allow = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deny = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllowWithDelegation = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DirectSvcRef.IDirectService")]
    public interface IDirectService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/Test", ReplyAction="http://tempuri.org/IDirectService/TestResponse")]
        bool Test(out string output, string input);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDirectService/Test", ReplyAction="http://tempuri.org/IDirectService/TestResponse")]
        System.IAsyncResult BeginTest(string input, System.AsyncCallback callback, object asyncState);
        
        bool EndTest(out string output, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/DirectGetDBUser", ReplyAction="http://tempuri.org/IDirectService/DirectGetDBUserResponse")]
        AzManWebServicesTest.DirectSvcRef.DBUser DirectGetDBUser(string userName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDirectService/DirectGetDBUser", ReplyAction="http://tempuri.org/IDirectService/DirectGetDBUserResponse")]
        System.IAsyncResult BeginDirectGetDBUser(string userName, System.AsyncCallback callback, object asyncState);
        
        AzManWebServicesTest.DirectSvcRef.DBUser EndDirectGetDBUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/GetUser", ReplyAction="http://tempuri.org/IDirectService/GetUserResponse")]
        bool GetUser(out AzManWebServicesTest.DirectSvcRef.SqlAzManDBUser azManUser, out string statusType, out string status, out string stackTrace, string ldapDomain, string userName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDirectService/GetUser", ReplyAction="http://tempuri.org/IDirectService/GetUserResponse")]
        System.IAsyncResult BeginGetUser(string ldapDomain, string userName, System.AsyncCallback callback, object asyncState);
        
        bool EndGetUser(out AzManWebServicesTest.DirectSvcRef.SqlAzManDBUser azManUser, out string statusType, out string status, out string stackTrace, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/DirectValidatePassword", ReplyAction="http://tempuri.org/IDirectService/DirectValidatePasswordResponse")]
        bool DirectValidatePassword(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDirectService/DirectValidatePassword", ReplyAction="http://tempuri.org/IDirectService/DirectValidatePasswordResponse")]
        System.IAsyncResult BeginDirectValidatePassword(string userName, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndDirectValidatePassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/DirectCheckAccessForDatabaseUsersWithoutAttribu" +
            "tesRetrieve", ReplyAction="http://tempuri.org/IDirectService/DirectCheckAccessForDatabaseUsersWithoutAttribu" +
            "tesRetrieveResponse")]
        AzManWebServicesTest.DirectSvcRef.AuthorizationType DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve(string store, string app, string item, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDirectService/DirectCheckAccessForDatabaseUsersWithoutAttribu" +
            "tesRetrieve", ReplyAction="http://tempuri.org/IDirectService/DirectCheckAccessForDatabaseUsersWithoutAttribu" +
            "tesRetrieveResponse")]
        System.IAsyncResult BeginDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve(string store, string app, string item, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState);
        
        AzManWebServicesTest.DirectSvcRef.AuthorizationType EndDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/ChangePwd", ReplyAction="http://tempuri.org/IDirectService/ChangePwdResponse")]
        bool ChangePwd(out string statusMessage, AzManWebServicesTest.DirectSvcRef.DBUser user, string current, string renewed, string confirmation);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDirectService/ChangePwd", ReplyAction="http://tempuri.org/IDirectService/ChangePwdResponse")]
        System.IAsyncResult BeginChangePwd(AzManWebServicesTest.DirectSvcRef.DBUser user, string current, string renewed, string confirmation, System.AsyncCallback callback, object asyncState);
        
        bool EndChangePwd(out string statusMessage, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/ChangePwdEx", ReplyAction="http://tempuri.org/IDirectService/ChangePwdExResponse")]
        bool ChangePwdEx(out string statusType, out string statusMessage, out string statusTrace, AzManWebServicesTest.DirectSvcRef.DBUser user, string current, string renewed, string confirmation);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDirectService/ChangePwdEx", ReplyAction="http://tempuri.org/IDirectService/ChangePwdExResponse")]
        System.IAsyncResult BeginChangePwdEx(AzManWebServicesTest.DirectSvcRef.DBUser user, string current, string renewed, string confirmation, System.AsyncCallback callback, object asyncState);
        
        bool EndChangePwdEx(out string statusType, out string statusMessage, out string statusTrace, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/ValidatePassword", ReplyAction="http://tempuri.org/IDirectService/ValidatePasswordResponse")]
        bool ValidatePassword(out AzManWebServicesTest.DirectSvcRef.SqlAzManDBUser azManUser, out string statusType, out string status, out string stackTrace, string domain, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDirectService/ValidatePassword", ReplyAction="http://tempuri.org/IDirectService/ValidatePasswordResponse")]
        System.IAsyncResult BeginValidatePassword(string domain, string userName, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndValidatePassword(out AzManWebServicesTest.DirectSvcRef.SqlAzManDBUser azManUser, out string statusType, out string status, out string stackTrace, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/CheckAccessLDAP", ReplyAction="http://tempuri.org/IDirectService/CheckAccessLDAPResponse")]
        bool CheckAccessLDAP(out AzManWebServicesTest.DirectSvcRef.AuthorizationType authorization, out string statusType, out string status, out string stackTrace, string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool OperationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDirectService/CheckAccessLDAP", ReplyAction="http://tempuri.org/IDirectService/CheckAccessLDAPResponse")]
        System.IAsyncResult BeginCheckAccessLDAP(string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool OperationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckAccessLDAP(out AzManWebServicesTest.DirectSvcRef.AuthorizationType authorization, out string statusType, out string status, out string stackTrace, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirectService/CheckAccessLDAPEx", ReplyAction="http://tempuri.org/IDirectService/CheckAccessLDAPExResponse")]
        bool CheckAccessLDAPEx(out System.Collections.Generic.KeyValuePair<string, string>[] attributes, out AzManWebServicesTest.DirectSvcRef.AuthorizationType authorization, out string statusType, out string status, out string stackTrace, string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool OperationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDirectService/CheckAccessLDAPEx", ReplyAction="http://tempuri.org/IDirectService/CheckAccessLDAPExResponse")]
        System.IAsyncResult BeginCheckAccessLDAPEx(string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool OperationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckAccessLDAPEx(out System.Collections.Generic.KeyValuePair<string, string>[] attributes, out AzManWebServicesTest.DirectSvcRef.AuthorizationType authorization, out string statusType, out string status, out string stackTrace, System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDirectServiceChannel : AzManWebServicesTest.DirectSvcRef.IDirectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string output {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DirectGetDBUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DirectGetDBUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AzManWebServicesTest.DirectSvcRef.DBUser Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManWebServicesTest.DirectSvcRef.DBUser)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AzManWebServicesTest.DirectSvcRef.SqlAzManDBUser azManUser {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManWebServicesTest.DirectSvcRef.SqlAzManDBUser)(this.results[0]));
            }
        }
        
        public string statusType {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public string stackTrace {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DirectValidatePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DirectValidatePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AzManWebServicesTest.DirectSvcRef.AuthorizationType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManWebServicesTest.DirectSvcRef.AuthorizationType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangePwdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangePwdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string statusMessage {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangePwdExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangePwdExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string statusType {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string statusMessage {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string statusTrace {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidatePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidatePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AzManWebServicesTest.DirectSvcRef.SqlAzManDBUser azManUser {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManWebServicesTest.DirectSvcRef.SqlAzManDBUser)(this.results[0]));
            }
        }
        
        public string statusType {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public string stackTrace {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckAccessLDAPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckAccessLDAPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AzManWebServicesTest.DirectSvcRef.AuthorizationType authorization {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManWebServicesTest.DirectSvcRef.AuthorizationType)(this.results[0]));
            }
        }
        
        public string statusType {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public string stackTrace {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckAccessLDAPExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckAccessLDAPExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.KeyValuePair<string, string>[] attributes {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.KeyValuePair<string, string>[])(this.results[0]));
            }
        }
        
        public AzManWebServicesTest.DirectSvcRef.AuthorizationType authorization {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AzManWebServicesTest.DirectSvcRef.AuthorizationType)(this.results[1]));
            }
        }
        
        public string statusType {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public string status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        public string stackTrace {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DirectServiceClient : System.ServiceModel.ClientBase<AzManWebServicesTest.DirectSvcRef.IDirectService>, AzManWebServicesTest.DirectSvcRef.IDirectService {
        
        private BeginOperationDelegate onBeginTestDelegate;
        
        private EndOperationDelegate onEndTestDelegate;
        
        private System.Threading.SendOrPostCallback onTestCompletedDelegate;
        
        private BeginOperationDelegate onBeginDirectGetDBUserDelegate;
        
        private EndOperationDelegate onEndDirectGetDBUserDelegate;
        
        private System.Threading.SendOrPostCallback onDirectGetDBUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserDelegate;
        
        private EndOperationDelegate onEndGetUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginDirectValidatePasswordDelegate;
        
        private EndOperationDelegate onEndDirectValidatePasswordDelegate;
        
        private System.Threading.SendOrPostCallback onDirectValidatePasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveDelegate;
        
        private EndOperationDelegate onEndDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangePwdDelegate;
        
        private EndOperationDelegate onEndChangePwdDelegate;
        
        private System.Threading.SendOrPostCallback onChangePwdCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangePwdExDelegate;
        
        private EndOperationDelegate onEndChangePwdExDelegate;
        
        private System.Threading.SendOrPostCallback onChangePwdExCompletedDelegate;
        
        private BeginOperationDelegate onBeginValidatePasswordDelegate;
        
        private EndOperationDelegate onEndValidatePasswordDelegate;
        
        private System.Threading.SendOrPostCallback onValidatePasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckAccessLDAPDelegate;
        
        private EndOperationDelegate onEndCheckAccessLDAPDelegate;
        
        private System.Threading.SendOrPostCallback onCheckAccessLDAPCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckAccessLDAPExDelegate;
        
        private EndOperationDelegate onEndCheckAccessLDAPExDelegate;
        
        private System.Threading.SendOrPostCallback onCheckAccessLDAPExCompletedDelegate;
        
        public DirectServiceClient() {
        }
        
        public DirectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DirectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DirectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DirectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<TestCompletedEventArgs> TestCompleted;
        
        public event System.EventHandler<DirectGetDBUserCompletedEventArgs> DirectGetDBUserCompleted;
        
        public event System.EventHandler<GetUserCompletedEventArgs> GetUserCompleted;
        
        public event System.EventHandler<DirectValidatePasswordCompletedEventArgs> DirectValidatePasswordCompleted;
        
        public event System.EventHandler<DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedEventArgs> DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompleted;
        
        public event System.EventHandler<ChangePwdCompletedEventArgs> ChangePwdCompleted;
        
        public event System.EventHandler<ChangePwdExCompletedEventArgs> ChangePwdExCompleted;
        
        public event System.EventHandler<ValidatePasswordCompletedEventArgs> ValidatePasswordCompleted;
        
        public event System.EventHandler<CheckAccessLDAPCompletedEventArgs> CheckAccessLDAPCompleted;
        
        public event System.EventHandler<CheckAccessLDAPExCompletedEventArgs> CheckAccessLDAPExCompleted;
        
        public bool Test(out string output, string input) {
            return base.Channel.Test(out output, input);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTest(string input, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTest(input, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndTest(out string output, System.IAsyncResult result) {
            return base.Channel.EndTest(out output, result);
        }
        
        private System.IAsyncResult OnBeginTest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string input = ((string)(inValues[0]));
            return this.BeginTest(input, callback, asyncState);
        }
        
        private object[] OnEndTest(System.IAsyncResult result) {
            string output = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndTest(out output, result);
            return new object[] {
                    output,
                    retVal};
        }
        
        private void OnTestCompleted(object state) {
            if ((this.TestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCompleted(this, new TestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestAsync(string input) {
            this.TestAsync(input, null);
        }
        
        public void TestAsync(string input, object userState) {
            if ((this.onBeginTestDelegate == null)) {
                this.onBeginTestDelegate = new BeginOperationDelegate(this.OnBeginTest);
            }
            if ((this.onEndTestDelegate == null)) {
                this.onEndTestDelegate = new EndOperationDelegate(this.OnEndTest);
            }
            if ((this.onTestCompletedDelegate == null)) {
                this.onTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCompleted);
            }
            base.InvokeAsync(this.onBeginTestDelegate, new object[] {
                        input}, this.onEndTestDelegate, this.onTestCompletedDelegate, userState);
        }
        
        public AzManWebServicesTest.DirectSvcRef.DBUser DirectGetDBUser(string userName) {
            return base.Channel.DirectGetDBUser(userName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDirectGetDBUser(string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDirectGetDBUser(userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AzManWebServicesTest.DirectSvcRef.DBUser EndDirectGetDBUser(System.IAsyncResult result) {
            return base.Channel.EndDirectGetDBUser(result);
        }
        
        private System.IAsyncResult OnBeginDirectGetDBUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            return this.BeginDirectGetDBUser(userName, callback, asyncState);
        }
        
        private object[] OnEndDirectGetDBUser(System.IAsyncResult result) {
            AzManWebServicesTest.DirectSvcRef.DBUser retVal = this.EndDirectGetDBUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDirectGetDBUserCompleted(object state) {
            if ((this.DirectGetDBUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DirectGetDBUserCompleted(this, new DirectGetDBUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DirectGetDBUserAsync(string userName) {
            this.DirectGetDBUserAsync(userName, null);
        }
        
        public void DirectGetDBUserAsync(string userName, object userState) {
            if ((this.onBeginDirectGetDBUserDelegate == null)) {
                this.onBeginDirectGetDBUserDelegate = new BeginOperationDelegate(this.OnBeginDirectGetDBUser);
            }
            if ((this.onEndDirectGetDBUserDelegate == null)) {
                this.onEndDirectGetDBUserDelegate = new EndOperationDelegate(this.OnEndDirectGetDBUser);
            }
            if ((this.onDirectGetDBUserCompletedDelegate == null)) {
                this.onDirectGetDBUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDirectGetDBUserCompleted);
            }
            base.InvokeAsync(this.onBeginDirectGetDBUserDelegate, new object[] {
                        userName}, this.onEndDirectGetDBUserDelegate, this.onDirectGetDBUserCompletedDelegate, userState);
        }
        
        public bool GetUser(out AzManWebServicesTest.DirectSvcRef.SqlAzManDBUser azManUser, out string statusType, out string status, out string stackTrace, string ldapDomain, string userName) {
            return base.Channel.GetUser(out azManUser, out statusType, out status, out stackTrace, ldapDomain, userName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUser(string ldapDomain, string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUser(ldapDomain, userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndGetUser(out AzManWebServicesTest.DirectSvcRef.SqlAzManDBUser azManUser, out string statusType, out string status, out string stackTrace, System.IAsyncResult result) {
            return base.Channel.EndGetUser(out azManUser, out statusType, out status, out stackTrace, result);
        }
        
        private System.IAsyncResult OnBeginGetUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ldapDomain = ((string)(inValues[0]));
            string userName = ((string)(inValues[1]));
            return this.BeginGetUser(ldapDomain, userName, callback, asyncState);
        }
        
        private object[] OnEndGetUser(System.IAsyncResult result) {
            AzManWebServicesTest.DirectSvcRef.SqlAzManDBUser azManUser = this.GetDefaultValueForInitialization<AzManWebServicesTest.DirectSvcRef.SqlAzManDBUser>();
            string statusType = this.GetDefaultValueForInitialization<string>();
            string status = this.GetDefaultValueForInitialization<string>();
            string stackTrace = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndGetUser(out azManUser, out statusType, out status, out stackTrace, result);
            return new object[] {
                    azManUser,
                    statusType,
                    status,
                    stackTrace,
                    retVal};
        }
        
        private void OnGetUserCompleted(object state) {
            if ((this.GetUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserCompleted(this, new GetUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserAsync(string ldapDomain, string userName) {
            this.GetUserAsync(ldapDomain, userName, null);
        }
        
        public void GetUserAsync(string ldapDomain, string userName, object userState) {
            if ((this.onBeginGetUserDelegate == null)) {
                this.onBeginGetUserDelegate = new BeginOperationDelegate(this.OnBeginGetUser);
            }
            if ((this.onEndGetUserDelegate == null)) {
                this.onEndGetUserDelegate = new EndOperationDelegate(this.OnEndGetUser);
            }
            if ((this.onGetUserCompletedDelegate == null)) {
                this.onGetUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserDelegate, new object[] {
                        ldapDomain,
                        userName}, this.onEndGetUserDelegate, this.onGetUserCompletedDelegate, userState);
        }
        
        public bool DirectValidatePassword(string userName, string password) {
            return base.Channel.DirectValidatePassword(userName, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDirectValidatePassword(string userName, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDirectValidatePassword(userName, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDirectValidatePassword(System.IAsyncResult result) {
            return base.Channel.EndDirectValidatePassword(result);
        }
        
        private System.IAsyncResult OnBeginDirectValidatePassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginDirectValidatePassword(userName, password, callback, asyncState);
        }
        
        private object[] OnEndDirectValidatePassword(System.IAsyncResult result) {
            bool retVal = this.EndDirectValidatePassword(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDirectValidatePasswordCompleted(object state) {
            if ((this.DirectValidatePasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DirectValidatePasswordCompleted(this, new DirectValidatePasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DirectValidatePasswordAsync(string userName, string password) {
            this.DirectValidatePasswordAsync(userName, password, null);
        }
        
        public void DirectValidatePasswordAsync(string userName, string password, object userState) {
            if ((this.onBeginDirectValidatePasswordDelegate == null)) {
                this.onBeginDirectValidatePasswordDelegate = new BeginOperationDelegate(this.OnBeginDirectValidatePassword);
            }
            if ((this.onEndDirectValidatePasswordDelegate == null)) {
                this.onEndDirectValidatePasswordDelegate = new EndOperationDelegate(this.OnEndDirectValidatePassword);
            }
            if ((this.onDirectValidatePasswordCompletedDelegate == null)) {
                this.onDirectValidatePasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDirectValidatePasswordCompleted);
            }
            base.InvokeAsync(this.onBeginDirectValidatePasswordDelegate, new object[] {
                        userName,
                        password}, this.onEndDirectValidatePasswordDelegate, this.onDirectValidatePasswordCompletedDelegate, userState);
        }
        
        public AzManWebServicesTest.DirectSvcRef.AuthorizationType DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve(string store, string app, string item, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            return base.Channel.DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve(store, app, item, DBuserSSid, validFor, operationsOnly, contextParameters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve(string store, string app, string item, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve(store, app, item, DBuserSSid, validFor, operationsOnly, contextParameters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AzManWebServicesTest.DirectSvcRef.AuthorizationType EndDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve(System.IAsyncResult result) {
            return base.Channel.EndDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve(result);
        }
        
        private System.IAsyncResult OnBeginDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string store = ((string)(inValues[0]));
            string app = ((string)(inValues[1]));
            string item = ((string)(inValues[2]));
            string DBuserSSid = ((string)(inValues[3]));
            System.DateTime validFor = ((System.DateTime)(inValues[4]));
            bool operationsOnly = ((bool)(inValues[5]));
            System.Collections.Generic.KeyValuePair<string, object>[] contextParameters = ((System.Collections.Generic.KeyValuePair<string, object>[])(inValues[6]));
            return this.BeginDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve(store, app, item, DBuserSSid, validFor, operationsOnly, contextParameters, callback, asyncState);
        }
        
        private object[] OnEndDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve(System.IAsyncResult result) {
            AzManWebServicesTest.DirectSvcRef.AuthorizationType retVal = this.EndDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompleted(object state) {
            if ((this.DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompleted(this, new DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveAsync(string store, string app, string item, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            this.DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveAsync(store, app, item, DBuserSSid, validFor, operationsOnly, contextParameters, null);
        }
        
        public void DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveAsync(string store, string app, string item, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, object userState) {
            if ((this.onBeginDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveDelegate == null)) {
                this.onBeginDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveDelegate = new BeginOperationDelegate(this.OnBeginDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve);
            }
            if ((this.onEndDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveDelegate == null)) {
                this.onEndDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveDelegate = new EndOperationDelegate(this.OnEndDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve);
            }
            if ((this.onDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedDelegate == null)) {
                this.onDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveDelegate, new object[] {
                        store,
                        app,
                        item,
                        DBuserSSid,
                        validFor,
                        operationsOnly,
                        contextParameters}, this.onEndDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveDelegate, this.onDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedDelegate, userState);
        }
        
        public bool ChangePwd(out string statusMessage, AzManWebServicesTest.DirectSvcRef.DBUser user, string current, string renewed, string confirmation) {
            return base.Channel.ChangePwd(out statusMessage, user, current, renewed, confirmation);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChangePwd(AzManWebServicesTest.DirectSvcRef.DBUser user, string current, string renewed, string confirmation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangePwd(user, current, renewed, confirmation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndChangePwd(out string statusMessage, System.IAsyncResult result) {
            return base.Channel.EndChangePwd(out statusMessage, result);
        }
        
        private System.IAsyncResult OnBeginChangePwd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AzManWebServicesTest.DirectSvcRef.DBUser user = ((AzManWebServicesTest.DirectSvcRef.DBUser)(inValues[0]));
            string current = ((string)(inValues[1]));
            string renewed = ((string)(inValues[2]));
            string confirmation = ((string)(inValues[3]));
            return this.BeginChangePwd(user, current, renewed, confirmation, callback, asyncState);
        }
        
        private object[] OnEndChangePwd(System.IAsyncResult result) {
            string statusMessage = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndChangePwd(out statusMessage, result);
            return new object[] {
                    statusMessage,
                    retVal};
        }
        
        private void OnChangePwdCompleted(object state) {
            if ((this.ChangePwdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangePwdCompleted(this, new ChangePwdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangePwdAsync(AzManWebServicesTest.DirectSvcRef.DBUser user, string current, string renewed, string confirmation) {
            this.ChangePwdAsync(user, current, renewed, confirmation, null);
        }
        
        public void ChangePwdAsync(AzManWebServicesTest.DirectSvcRef.DBUser user, string current, string renewed, string confirmation, object userState) {
            if ((this.onBeginChangePwdDelegate == null)) {
                this.onBeginChangePwdDelegate = new BeginOperationDelegate(this.OnBeginChangePwd);
            }
            if ((this.onEndChangePwdDelegate == null)) {
                this.onEndChangePwdDelegate = new EndOperationDelegate(this.OnEndChangePwd);
            }
            if ((this.onChangePwdCompletedDelegate == null)) {
                this.onChangePwdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangePwdCompleted);
            }
            base.InvokeAsync(this.onBeginChangePwdDelegate, new object[] {
                        user,
                        current,
                        renewed,
                        confirmation}, this.onEndChangePwdDelegate, this.onChangePwdCompletedDelegate, userState);
        }
        
        public bool ChangePwdEx(out string statusType, out string statusMessage, out string statusTrace, AzManWebServicesTest.DirectSvcRef.DBUser user, string current, string renewed, string confirmation) {
            return base.Channel.ChangePwdEx(out statusType, out statusMessage, out statusTrace, user, current, renewed, confirmation);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChangePwdEx(AzManWebServicesTest.DirectSvcRef.DBUser user, string current, string renewed, string confirmation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangePwdEx(user, current, renewed, confirmation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndChangePwdEx(out string statusType, out string statusMessage, out string statusTrace, System.IAsyncResult result) {
            return base.Channel.EndChangePwdEx(out statusType, out statusMessage, out statusTrace, result);
        }
        
        private System.IAsyncResult OnBeginChangePwdEx(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AzManWebServicesTest.DirectSvcRef.DBUser user = ((AzManWebServicesTest.DirectSvcRef.DBUser)(inValues[0]));
            string current = ((string)(inValues[1]));
            string renewed = ((string)(inValues[2]));
            string confirmation = ((string)(inValues[3]));
            return this.BeginChangePwdEx(user, current, renewed, confirmation, callback, asyncState);
        }
        
        private object[] OnEndChangePwdEx(System.IAsyncResult result) {
            string statusType = this.GetDefaultValueForInitialization<string>();
            string statusMessage = this.GetDefaultValueForInitialization<string>();
            string statusTrace = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndChangePwdEx(out statusType, out statusMessage, out statusTrace, result);
            return new object[] {
                    statusType,
                    statusMessage,
                    statusTrace,
                    retVal};
        }
        
        private void OnChangePwdExCompleted(object state) {
            if ((this.ChangePwdExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangePwdExCompleted(this, new ChangePwdExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangePwdExAsync(AzManWebServicesTest.DirectSvcRef.DBUser user, string current, string renewed, string confirmation) {
            this.ChangePwdExAsync(user, current, renewed, confirmation, null);
        }
        
        public void ChangePwdExAsync(AzManWebServicesTest.DirectSvcRef.DBUser user, string current, string renewed, string confirmation, object userState) {
            if ((this.onBeginChangePwdExDelegate == null)) {
                this.onBeginChangePwdExDelegate = new BeginOperationDelegate(this.OnBeginChangePwdEx);
            }
            if ((this.onEndChangePwdExDelegate == null)) {
                this.onEndChangePwdExDelegate = new EndOperationDelegate(this.OnEndChangePwdEx);
            }
            if ((this.onChangePwdExCompletedDelegate == null)) {
                this.onChangePwdExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangePwdExCompleted);
            }
            base.InvokeAsync(this.onBeginChangePwdExDelegate, new object[] {
                        user,
                        current,
                        renewed,
                        confirmation}, this.onEndChangePwdExDelegate, this.onChangePwdExCompletedDelegate, userState);
        }
        
        public bool ValidatePassword(out AzManWebServicesTest.DirectSvcRef.SqlAzManDBUser azManUser, out string statusType, out string status, out string stackTrace, string domain, string userName, string password) {
            return base.Channel.ValidatePassword(out azManUser, out statusType, out status, out stackTrace, domain, userName, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginValidatePassword(string domain, string userName, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidatePassword(domain, userName, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndValidatePassword(out AzManWebServicesTest.DirectSvcRef.SqlAzManDBUser azManUser, out string statusType, out string status, out string stackTrace, System.IAsyncResult result) {
            return base.Channel.EndValidatePassword(out azManUser, out statusType, out status, out stackTrace, result);
        }
        
        private System.IAsyncResult OnBeginValidatePassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string domain = ((string)(inValues[0]));
            string userName = ((string)(inValues[1]));
            string password = ((string)(inValues[2]));
            return this.BeginValidatePassword(domain, userName, password, callback, asyncState);
        }
        
        private object[] OnEndValidatePassword(System.IAsyncResult result) {
            AzManWebServicesTest.DirectSvcRef.SqlAzManDBUser azManUser = this.GetDefaultValueForInitialization<AzManWebServicesTest.DirectSvcRef.SqlAzManDBUser>();
            string statusType = this.GetDefaultValueForInitialization<string>();
            string status = this.GetDefaultValueForInitialization<string>();
            string stackTrace = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndValidatePassword(out azManUser, out statusType, out status, out stackTrace, result);
            return new object[] {
                    azManUser,
                    statusType,
                    status,
                    stackTrace,
                    retVal};
        }
        
        private void OnValidatePasswordCompleted(object state) {
            if ((this.ValidatePasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidatePasswordCompleted(this, new ValidatePasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidatePasswordAsync(string domain, string userName, string password) {
            this.ValidatePasswordAsync(domain, userName, password, null);
        }
        
        public void ValidatePasswordAsync(string domain, string userName, string password, object userState) {
            if ((this.onBeginValidatePasswordDelegate == null)) {
                this.onBeginValidatePasswordDelegate = new BeginOperationDelegate(this.OnBeginValidatePassword);
            }
            if ((this.onEndValidatePasswordDelegate == null)) {
                this.onEndValidatePasswordDelegate = new EndOperationDelegate(this.OnEndValidatePassword);
            }
            if ((this.onValidatePasswordCompletedDelegate == null)) {
                this.onValidatePasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidatePasswordCompleted);
            }
            base.InvokeAsync(this.onBeginValidatePasswordDelegate, new object[] {
                        domain,
                        userName,
                        password}, this.onEndValidatePasswordDelegate, this.onValidatePasswordCompletedDelegate, userState);
        }
        
        public bool CheckAccessLDAP(out AzManWebServicesTest.DirectSvcRef.AuthorizationType authorization, out string statusType, out string status, out string stackTrace, string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool OperationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            return base.Channel.CheckAccessLDAP(out authorization, out statusType, out status, out stackTrace, StoreName, ApplicationName, ItemName, LDAPDomain, User, Sid, ValidFor, OperationsOnly, contextParameters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckAccessLDAP(string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool OperationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckAccessLDAP(StoreName, ApplicationName, ItemName, LDAPDomain, User, Sid, ValidFor, OperationsOnly, contextParameters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCheckAccessLDAP(out AzManWebServicesTest.DirectSvcRef.AuthorizationType authorization, out string statusType, out string status, out string stackTrace, System.IAsyncResult result) {
            return base.Channel.EndCheckAccessLDAP(out authorization, out statusType, out status, out stackTrace, result);
        }
        
        private System.IAsyncResult OnBeginCheckAccessLDAP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string StoreName = ((string)(inValues[0]));
            string ApplicationName = ((string)(inValues[1]));
            string ItemName = ((string)(inValues[2]));
            string LDAPDomain = ((string)(inValues[3]));
            string User = ((string)(inValues[4]));
            string Sid = ((string)(inValues[5]));
            System.DateTime ValidFor = ((System.DateTime)(inValues[6]));
            bool OperationsOnly = ((bool)(inValues[7]));
            System.Collections.Generic.KeyValuePair<string, object>[] contextParameters = ((System.Collections.Generic.KeyValuePair<string, object>[])(inValues[8]));
            return this.BeginCheckAccessLDAP(StoreName, ApplicationName, ItemName, LDAPDomain, User, Sid, ValidFor, OperationsOnly, contextParameters, callback, asyncState);
        }
        
        private object[] OnEndCheckAccessLDAP(System.IAsyncResult result) {
            AzManWebServicesTest.DirectSvcRef.AuthorizationType authorization = this.GetDefaultValueForInitialization<AzManWebServicesTest.DirectSvcRef.AuthorizationType>();
            string statusType = this.GetDefaultValueForInitialization<string>();
            string status = this.GetDefaultValueForInitialization<string>();
            string stackTrace = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndCheckAccessLDAP(out authorization, out statusType, out status, out stackTrace, result);
            return new object[] {
                    authorization,
                    statusType,
                    status,
                    stackTrace,
                    retVal};
        }
        
        private void OnCheckAccessLDAPCompleted(object state) {
            if ((this.CheckAccessLDAPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckAccessLDAPCompleted(this, new CheckAccessLDAPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckAccessLDAPAsync(string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool OperationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            this.CheckAccessLDAPAsync(StoreName, ApplicationName, ItemName, LDAPDomain, User, Sid, ValidFor, OperationsOnly, contextParameters, null);
        }
        
        public void CheckAccessLDAPAsync(string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool OperationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, object userState) {
            if ((this.onBeginCheckAccessLDAPDelegate == null)) {
                this.onBeginCheckAccessLDAPDelegate = new BeginOperationDelegate(this.OnBeginCheckAccessLDAP);
            }
            if ((this.onEndCheckAccessLDAPDelegate == null)) {
                this.onEndCheckAccessLDAPDelegate = new EndOperationDelegate(this.OnEndCheckAccessLDAP);
            }
            if ((this.onCheckAccessLDAPCompletedDelegate == null)) {
                this.onCheckAccessLDAPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckAccessLDAPCompleted);
            }
            base.InvokeAsync(this.onBeginCheckAccessLDAPDelegate, new object[] {
                        StoreName,
                        ApplicationName,
                        ItemName,
                        LDAPDomain,
                        User,
                        Sid,
                        ValidFor,
                        OperationsOnly,
                        contextParameters}, this.onEndCheckAccessLDAPDelegate, this.onCheckAccessLDAPCompletedDelegate, userState);
        }
        
        public bool CheckAccessLDAPEx(out System.Collections.Generic.KeyValuePair<string, string>[] attributes, out AzManWebServicesTest.DirectSvcRef.AuthorizationType authorization, out string statusType, out string status, out string stackTrace, string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool OperationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            return base.Channel.CheckAccessLDAPEx(out attributes, out authorization, out statusType, out status, out stackTrace, StoreName, ApplicationName, ItemName, LDAPDomain, User, Sid, ValidFor, OperationsOnly, contextParameters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckAccessLDAPEx(string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool OperationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckAccessLDAPEx(StoreName, ApplicationName, ItemName, LDAPDomain, User, Sid, ValidFor, OperationsOnly, contextParameters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCheckAccessLDAPEx(out System.Collections.Generic.KeyValuePair<string, string>[] attributes, out AzManWebServicesTest.DirectSvcRef.AuthorizationType authorization, out string statusType, out string status, out string stackTrace, System.IAsyncResult result) {
            return base.Channel.EndCheckAccessLDAPEx(out attributes, out authorization, out statusType, out status, out stackTrace, result);
        }
        
        private System.IAsyncResult OnBeginCheckAccessLDAPEx(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string StoreName = ((string)(inValues[0]));
            string ApplicationName = ((string)(inValues[1]));
            string ItemName = ((string)(inValues[2]));
            string LDAPDomain = ((string)(inValues[3]));
            string User = ((string)(inValues[4]));
            string Sid = ((string)(inValues[5]));
            System.DateTime ValidFor = ((System.DateTime)(inValues[6]));
            bool OperationsOnly = ((bool)(inValues[7]));
            System.Collections.Generic.KeyValuePair<string, object>[] contextParameters = ((System.Collections.Generic.KeyValuePair<string, object>[])(inValues[8]));
            return this.BeginCheckAccessLDAPEx(StoreName, ApplicationName, ItemName, LDAPDomain, User, Sid, ValidFor, OperationsOnly, contextParameters, callback, asyncState);
        }
        
        private object[] OnEndCheckAccessLDAPEx(System.IAsyncResult result) {
            System.Collections.Generic.KeyValuePair<string, string>[] attributes = this.GetDefaultValueForInitialization<System.Collections.Generic.KeyValuePair<string, string>[]>();
            AzManWebServicesTest.DirectSvcRef.AuthorizationType authorization = this.GetDefaultValueForInitialization<AzManWebServicesTest.DirectSvcRef.AuthorizationType>();
            string statusType = this.GetDefaultValueForInitialization<string>();
            string status = this.GetDefaultValueForInitialization<string>();
            string stackTrace = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndCheckAccessLDAPEx(out attributes, out authorization, out statusType, out status, out stackTrace, result);
            return new object[] {
                    attributes,
                    authorization,
                    statusType,
                    status,
                    stackTrace,
                    retVal};
        }
        
        private void OnCheckAccessLDAPExCompleted(object state) {
            if ((this.CheckAccessLDAPExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckAccessLDAPExCompleted(this, new CheckAccessLDAPExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckAccessLDAPExAsync(string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool OperationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            this.CheckAccessLDAPExAsync(StoreName, ApplicationName, ItemName, LDAPDomain, User, Sid, ValidFor, OperationsOnly, contextParameters, null);
        }
        
        public void CheckAccessLDAPExAsync(string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool OperationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, object userState) {
            if ((this.onBeginCheckAccessLDAPExDelegate == null)) {
                this.onBeginCheckAccessLDAPExDelegate = new BeginOperationDelegate(this.OnBeginCheckAccessLDAPEx);
            }
            if ((this.onEndCheckAccessLDAPExDelegate == null)) {
                this.onEndCheckAccessLDAPExDelegate = new EndOperationDelegate(this.OnEndCheckAccessLDAPEx);
            }
            if ((this.onCheckAccessLDAPExCompletedDelegate == null)) {
                this.onCheckAccessLDAPExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckAccessLDAPExCompleted);
            }
            base.InvokeAsync(this.onBeginCheckAccessLDAPExDelegate, new object[] {
                        StoreName,
                        ApplicationName,
                        ItemName,
                        LDAPDomain,
                        User,
                        Sid,
                        ValidFor,
                        OperationsOnly,
                        contextParameters}, this.onEndCheckAccessLDAPExDelegate, this.onCheckAccessLDAPExCompletedDelegate, userState);
        }
    }
}
