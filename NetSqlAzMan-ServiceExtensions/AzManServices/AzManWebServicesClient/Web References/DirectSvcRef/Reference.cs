//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace AzManWebServicesClient.DirectSvcRef {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IDirectService", Namespace="http://tempuri.org/")]
    public partial class DirectService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback TestOperationCompleted;
        
        private System.Threading.SendOrPostCallback DirectGetDBUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback DirectValidatePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePwdOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePwdExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidatePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAccessLDAPOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAccessLDAPExOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DirectService() {
            this.Url = "http://logindemo.sise.edu.pe:8181/AzManWebServices/DirectService.svc";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event TestCompletedEventHandler TestCompleted;
        
        /// <remarks/>
        public event DirectGetDBUserCompletedEventHandler DirectGetDBUserCompleted;
        
        /// <remarks/>
        public event GetUserCompletedEventHandler GetUserCompleted;
        
        /// <remarks/>
        public event DirectValidatePasswordCompletedEventHandler DirectValidatePasswordCompleted;
        
        /// <remarks/>
        public event DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedEventHandler DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompleted;
        
        /// <remarks/>
        public event ChangePwdCompletedEventHandler ChangePwdCompleted;
        
        /// <remarks/>
        public event ChangePwdExCompletedEventHandler ChangePwdExCompleted;
        
        /// <remarks/>
        public event ValidatePasswordCompletedEventHandler ValidatePasswordCompleted;
        
        /// <remarks/>
        public event CheckAccessLDAPCompletedEventHandler CheckAccessLDAPCompleted;
        
        /// <remarks/>
        public event CheckAccessLDAPExCompletedEventHandler CheckAccessLDAPExCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDirectService/Test", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Test([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string input, out bool TestResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool TestResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string output) {
            object[] results = this.Invoke("Test", new object[] {
                        input});
            TestResult = ((bool)(results[0]));
            TestResultSpecified = ((bool)(results[1]));
            output = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void TestAsync(string input) {
            this.TestAsync(input, null);
        }
        
        /// <remarks/>
        public void TestAsync(string input, object userState) {
            if ((this.TestOperationCompleted == null)) {
                this.TestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestOperationCompleted);
            }
            this.InvokeAsync("Test", new object[] {
                        input}, this.TestOperationCompleted, userState);
        }
        
        private void OnTestOperationCompleted(object arg) {
            if ((this.TestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestCompleted(this, new TestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDirectService/DirectGetDBUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DBUser DirectGetDBUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName) {
            object[] results = this.Invoke("DirectGetDBUser", new object[] {
                        userName});
            return ((DBUser)(results[0]));
        }
        
        /// <remarks/>
        public void DirectGetDBUserAsync(string userName) {
            this.DirectGetDBUserAsync(userName, null);
        }
        
        /// <remarks/>
        public void DirectGetDBUserAsync(string userName, object userState) {
            if ((this.DirectGetDBUserOperationCompleted == null)) {
                this.DirectGetDBUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDirectGetDBUserOperationCompleted);
            }
            this.InvokeAsync("DirectGetDBUser", new object[] {
                        userName}, this.DirectGetDBUserOperationCompleted, userState);
        }
        
        private void OnDirectGetDBUserOperationCompleted(object arg) {
            if ((this.DirectGetDBUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DirectGetDBUserCompleted(this, new DirectGetDBUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDirectService/GetUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ldapDomain, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, out bool GetUserResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool GetUserResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out SqlAzManDBUser azManUser, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string statusType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string status, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string stackTrace) {
            object[] results = this.Invoke("GetUser", new object[] {
                        ldapDomain,
                        userName});
            GetUserResult = ((bool)(results[0]));
            GetUserResultSpecified = ((bool)(results[1]));
            azManUser = ((SqlAzManDBUser)(results[2]));
            statusType = ((string)(results[3]));
            status = ((string)(results[4]));
            stackTrace = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void GetUserAsync(string ldapDomain, string userName) {
            this.GetUserAsync(ldapDomain, userName, null);
        }
        
        /// <remarks/>
        public void GetUserAsync(string ldapDomain, string userName, object userState) {
            if ((this.GetUserOperationCompleted == null)) {
                this.GetUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserOperationCompleted);
            }
            this.InvokeAsync("GetUser", new object[] {
                        ldapDomain,
                        userName}, this.GetUserOperationCompleted, userState);
        }
        
        private void OnGetUserOperationCompleted(object arg) {
            if ((this.GetUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCompleted(this, new GetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDirectService/DirectValidatePassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DirectValidatePassword([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, out bool DirectValidatePasswordResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool DirectValidatePasswordResultSpecified) {
            object[] results = this.Invoke("DirectValidatePassword", new object[] {
                        userName,
                        password});
            DirectValidatePasswordResult = ((bool)(results[0]));
            DirectValidatePasswordResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void DirectValidatePasswordAsync(string userName, string password) {
            this.DirectValidatePasswordAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void DirectValidatePasswordAsync(string userName, string password, object userState) {
            if ((this.DirectValidatePasswordOperationCompleted == null)) {
                this.DirectValidatePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDirectValidatePasswordOperationCompleted);
            }
            this.InvokeAsync("DirectValidatePassword", new object[] {
                        userName,
                        password}, this.DirectValidatePasswordOperationCompleted, userState);
        }
        
        private void OnDirectValidatePasswordOperationCompleted(object arg) {
            if ((this.DirectValidatePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DirectValidatePasswordCompleted(this, new DirectValidatePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDirectService/DirectCheckAccessForDatabaseUsersWithoutAttribu" +
            "tesRetrieve", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string store, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string app, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string item, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string DBuserSSid, System.DateTime validFor, [System.Xml.Serialization.XmlIgnoreAttribute()] bool validForSpecified, bool operationsOnly, [System.Xml.Serialization.XmlIgnoreAttribute()] bool operationsOnlySpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/System.Collections.Generic", IsNullable=false)] KeyValuePairOfstringanyType[] contextParameters, out AuthorizationType DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveResultSpecified) {
            object[] results = this.Invoke("DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve", new object[] {
                        store,
                        app,
                        item,
                        DBuserSSid,
                        validFor,
                        validForSpecified,
                        operationsOnly,
                        operationsOnlySpecified,
                        contextParameters});
            DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveResult = ((AuthorizationType)(results[0]));
            DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveAsync(string store, string app, string item, string DBuserSSid, System.DateTime validFor, bool validForSpecified, bool operationsOnly, bool operationsOnlySpecified, KeyValuePairOfstringanyType[] contextParameters) {
            this.DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveAsync(store, app, item, DBuserSSid, validFor, validForSpecified, operationsOnly, operationsOnlySpecified, contextParameters, null);
        }
        
        /// <remarks/>
        public void DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveAsync(string store, string app, string item, string DBuserSSid, System.DateTime validFor, bool validForSpecified, bool operationsOnly, bool operationsOnlySpecified, KeyValuePairOfstringanyType[] contextParameters, object userState) {
            if ((this.DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveOperationCompleted == null)) {
                this.DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveOperationCompleted);
            }
            this.InvokeAsync("DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieve", new object[] {
                        store,
                        app,
                        item,
                        DBuserSSid,
                        validFor,
                        validForSpecified,
                        operationsOnly,
                        operationsOnlySpecified,
                        contextParameters}, this.DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveOperationCompleted, userState);
        }
        
        private void OnDirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveOperationCompleted(object arg) {
            if ((this.DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompleted(this, new DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDirectService/ChangePwd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangePwd([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DBUser user, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string current, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string renewed, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string confirmation, out bool ChangePwdResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ChangePwdResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string statusMessage) {
            object[] results = this.Invoke("ChangePwd", new object[] {
                        user,
                        current,
                        renewed,
                        confirmation});
            ChangePwdResult = ((bool)(results[0]));
            ChangePwdResultSpecified = ((bool)(results[1]));
            statusMessage = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void ChangePwdAsync(DBUser user, string current, string renewed, string confirmation) {
            this.ChangePwdAsync(user, current, renewed, confirmation, null);
        }
        
        /// <remarks/>
        public void ChangePwdAsync(DBUser user, string current, string renewed, string confirmation, object userState) {
            if ((this.ChangePwdOperationCompleted == null)) {
                this.ChangePwdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePwdOperationCompleted);
            }
            this.InvokeAsync("ChangePwd", new object[] {
                        user,
                        current,
                        renewed,
                        confirmation}, this.ChangePwdOperationCompleted, userState);
        }
        
        private void OnChangePwdOperationCompleted(object arg) {
            if ((this.ChangePwdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePwdCompleted(this, new ChangePwdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDirectService/ChangePwdEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangePwdEx([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] DBUser user, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string current, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string renewed, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string confirmation, out bool ChangePwdExResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ChangePwdExResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string statusType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string statusMessage, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string statusTrace) {
            object[] results = this.Invoke("ChangePwdEx", new object[] {
                        user,
                        current,
                        renewed,
                        confirmation});
            ChangePwdExResult = ((bool)(results[0]));
            ChangePwdExResultSpecified = ((bool)(results[1]));
            statusType = ((string)(results[2]));
            statusMessage = ((string)(results[3]));
            statusTrace = ((string)(results[4]));
        }
        
        /// <remarks/>
        public void ChangePwdExAsync(DBUser user, string current, string renewed, string confirmation) {
            this.ChangePwdExAsync(user, current, renewed, confirmation, null);
        }
        
        /// <remarks/>
        public void ChangePwdExAsync(DBUser user, string current, string renewed, string confirmation, object userState) {
            if ((this.ChangePwdExOperationCompleted == null)) {
                this.ChangePwdExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePwdExOperationCompleted);
            }
            this.InvokeAsync("ChangePwdEx", new object[] {
                        user,
                        current,
                        renewed,
                        confirmation}, this.ChangePwdExOperationCompleted, userState);
        }
        
        private void OnChangePwdExOperationCompleted(object arg) {
            if ((this.ChangePwdExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePwdExCompleted(this, new ChangePwdExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDirectService/ValidatePassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ValidatePassword([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string domain, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, out bool ValidatePasswordResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ValidatePasswordResultSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out SqlAzManDBUser azManUser, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string statusType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string status, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string stackTrace) {
            object[] results = this.Invoke("ValidatePassword", new object[] {
                        domain,
                        userName,
                        password});
            ValidatePasswordResult = ((bool)(results[0]));
            ValidatePasswordResultSpecified = ((bool)(results[1]));
            azManUser = ((SqlAzManDBUser)(results[2]));
            statusType = ((string)(results[3]));
            status = ((string)(results[4]));
            stackTrace = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void ValidatePasswordAsync(string domain, string userName, string password) {
            this.ValidatePasswordAsync(domain, userName, password, null);
        }
        
        /// <remarks/>
        public void ValidatePasswordAsync(string domain, string userName, string password, object userState) {
            if ((this.ValidatePasswordOperationCompleted == null)) {
                this.ValidatePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidatePasswordOperationCompleted);
            }
            this.InvokeAsync("ValidatePassword", new object[] {
                        domain,
                        userName,
                        password}, this.ValidatePasswordOperationCompleted, userState);
        }
        
        private void OnValidatePasswordOperationCompleted(object arg) {
            if ((this.ValidatePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidatePasswordCompleted(this, new ValidatePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDirectService/CheckAccessLDAP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckAccessLDAP(
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string StoreName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ApplicationName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ItemName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string LDAPDomain, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string User, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Sid, 
                    System.DateTime ValidFor, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool ValidForSpecified, 
                    bool OperationsOnly, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool OperationsOnlySpecified, 
                    [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/System.Collections.Generic", IsNullable=false)] KeyValuePairOfstringanyType[] contextParameters, 
                    out bool CheckAccessLDAPResult, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] out bool CheckAccessLDAPResultSpecified, 
                    out AuthorizationType authorization, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] out bool authorizationSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string statusType, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string status, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string stackTrace) {
            object[] results = this.Invoke("CheckAccessLDAP", new object[] {
                        StoreName,
                        ApplicationName,
                        ItemName,
                        LDAPDomain,
                        User,
                        Sid,
                        ValidFor,
                        ValidForSpecified,
                        OperationsOnly,
                        OperationsOnlySpecified,
                        contextParameters});
            CheckAccessLDAPResult = ((bool)(results[0]));
            CheckAccessLDAPResultSpecified = ((bool)(results[1]));
            authorization = ((AuthorizationType)(results[2]));
            authorizationSpecified = ((bool)(results[3]));
            statusType = ((string)(results[4]));
            status = ((string)(results[5]));
            stackTrace = ((string)(results[6]));
        }
        
        /// <remarks/>
        public void CheckAccessLDAPAsync(string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool ValidForSpecified, bool OperationsOnly, bool OperationsOnlySpecified, KeyValuePairOfstringanyType[] contextParameters) {
            this.CheckAccessLDAPAsync(StoreName, ApplicationName, ItemName, LDAPDomain, User, Sid, ValidFor, ValidForSpecified, OperationsOnly, OperationsOnlySpecified, contextParameters, null);
        }
        
        /// <remarks/>
        public void CheckAccessLDAPAsync(string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool ValidForSpecified, bool OperationsOnly, bool OperationsOnlySpecified, KeyValuePairOfstringanyType[] contextParameters, object userState) {
            if ((this.CheckAccessLDAPOperationCompleted == null)) {
                this.CheckAccessLDAPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAccessLDAPOperationCompleted);
            }
            this.InvokeAsync("CheckAccessLDAP", new object[] {
                        StoreName,
                        ApplicationName,
                        ItemName,
                        LDAPDomain,
                        User,
                        Sid,
                        ValidFor,
                        ValidForSpecified,
                        OperationsOnly,
                        OperationsOnlySpecified,
                        contextParameters}, this.CheckAccessLDAPOperationCompleted, userState);
        }
        
        private void OnCheckAccessLDAPOperationCompleted(object arg) {
            if ((this.CheckAccessLDAPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAccessLDAPCompleted(this, new CheckAccessLDAPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IDirectService/CheckAccessLDAPEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckAccessLDAPEx(
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string StoreName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ApplicationName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ItemName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string LDAPDomain, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string User, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Sid, 
                    System.DateTime ValidFor, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool ValidForSpecified, 
                    bool OperationsOnly, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool OperationsOnlySpecified, 
                    [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/System.Collections.Generic", IsNullable=false)] KeyValuePairOfstringanyType[] contextParameters, 
                    out bool CheckAccessLDAPExResult, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] out bool CheckAccessLDAPExResultSpecified, 
                    [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/System.Collections.Generic", IsNullable=false)] out KeyValuePairOfstringstring[] attributes, 
                    out AuthorizationType authorization, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] out bool authorizationSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string statusType, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string status, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string stackTrace) {
            object[] results = this.Invoke("CheckAccessLDAPEx", new object[] {
                        StoreName,
                        ApplicationName,
                        ItemName,
                        LDAPDomain,
                        User,
                        Sid,
                        ValidFor,
                        ValidForSpecified,
                        OperationsOnly,
                        OperationsOnlySpecified,
                        contextParameters});
            CheckAccessLDAPExResult = ((bool)(results[0]));
            CheckAccessLDAPExResultSpecified = ((bool)(results[1]));
            attributes = ((KeyValuePairOfstringstring[])(results[2]));
            authorization = ((AuthorizationType)(results[3]));
            authorizationSpecified = ((bool)(results[4]));
            statusType = ((string)(results[5]));
            status = ((string)(results[6]));
            stackTrace = ((string)(results[7]));
        }
        
        /// <remarks/>
        public void CheckAccessLDAPExAsync(string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool ValidForSpecified, bool OperationsOnly, bool OperationsOnlySpecified, KeyValuePairOfstringanyType[] contextParameters) {
            this.CheckAccessLDAPExAsync(StoreName, ApplicationName, ItemName, LDAPDomain, User, Sid, ValidFor, ValidForSpecified, OperationsOnly, OperationsOnlySpecified, contextParameters, null);
        }
        
        /// <remarks/>
        public void CheckAccessLDAPExAsync(string StoreName, string ApplicationName, string ItemName, string LDAPDomain, string User, string Sid, System.DateTime ValidFor, bool ValidForSpecified, bool OperationsOnly, bool OperationsOnlySpecified, KeyValuePairOfstringanyType[] contextParameters, object userState) {
            if ((this.CheckAccessLDAPExOperationCompleted == null)) {
                this.CheckAccessLDAPExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAccessLDAPExOperationCompleted);
            }
            this.InvokeAsync("CheckAccessLDAPEx", new object[] {
                        StoreName,
                        ApplicationName,
                        ItemName,
                        LDAPDomain,
                        User,
                        Sid,
                        ValidFor,
                        ValidForSpecified,
                        OperationsOnly,
                        OperationsOnlySpecified,
                        contextParameters}, this.CheckAccessLDAPExOperationCompleted, userState);
        }
        
        private void OnCheckAccessLDAPExOperationCompleted(object arg) {
            if ((this.CheckAccessLDAPExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAccessLDAPExCompleted(this, new CheckAccessLDAPExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/NetSqlAzMan.Cache")]
    public partial class DBUser {
        
        private string attributeStringField;
        
        private int userIDField;
        
        private bool userIDFieldSpecified;
        
        private string userNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AttributeString {
            get {
                return this.attributeStringField;
            }
            set {
                this.attributeStringField = value;
            }
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UserIDSpecified {
            get {
                return this.userIDFieldSpecified;
            }
            set {
                this.userIDFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/System.Collections.Generic")]
    public partial class KeyValuePairOfstringstring {
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/System.Collections.Generic")]
    public partial class KeyValuePairOfstringanyType {
        
        private string keyField;
        
        private object valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://NetSqlAzMan/ServiceModel")]
    public partial class SqlAzManDBUser {
        
        private ArrayOfKeyValueOfstringanyTypeKeyValueOfstringanyType[] customColumnsField;
        
        private object customSidField;
        
        private string displayNameField;
        
        private bool isLDAPObjectField;
        
        private bool isLDAPObjectFieldSpecified;
        
        private string lDAPDomainField;
        
        private string userNameField;
        
        private string idField;
        
        private string refField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("KeyValueOfstringanyType", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public ArrayOfKeyValueOfstringanyTypeKeyValueOfstringanyType[] CustomColumns {
            get {
                return this.customColumnsField;
            }
            set {
                this.customColumnsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object CustomSid {
            get {
                return this.customSidField;
            }
            set {
                this.customSidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsLDAPObject {
            get {
                return this.isLDAPObjectField;
            }
            set {
                this.isLDAPObjectField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsLDAPObjectSpecified {
            get {
                return this.isLDAPObjectFieldSpecified;
            }
            set {
                this.isLDAPObjectFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LDAPDomain {
            get {
                return this.lDAPDomainField;
            }
            set {
                this.lDAPDomainField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.microsoft.com/2003/10/Serialization/", DataType="ID")]
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://schemas.microsoft.com/2003/10/Serialization/", DataType="IDREF")]
        public string Ref {
            get {
                return this.refField;
            }
            set {
                this.refField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
    public partial class ArrayOfKeyValueOfstringanyTypeKeyValueOfstringanyType {
        
        private string keyField;
        
        private object valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://NetSqlAzMan/ServiceModel")]
    public enum AuthorizationType {
        
        /// <remarks/>
        Neutral,
        
        /// <remarks/>
        Allow,
        
        /// <remarks/>
        Deny,
        
        /// <remarks/>
        AllowWithDelegation,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void TestCompletedEventHandler(object sender, TestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool TestResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool TestResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string output {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DirectGetDBUserCompletedEventHandler(object sender, DirectGetDBUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DirectGetDBUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DirectGetDBUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DBUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DBUser)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetUserCompletedEventHandler(object sender, GetUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool GetUserResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool GetUserResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public SqlAzManDBUser azManUser {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SqlAzManDBUser)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string statusType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string stackTrace {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DirectValidatePasswordCompletedEventHandler(object sender, DirectValidatePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DirectValidatePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DirectValidatePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool DirectValidatePasswordResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool DirectValidatePasswordResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedEventHandler(object sender, DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuthorizationType DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuthorizationType)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool DirectCheckAccessForDatabaseUsersWithoutAttributesRetrieveResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ChangePwdCompletedEventHandler(object sender, ChangePwdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePwdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePwdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ChangePwdResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ChangePwdResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string statusMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ChangePwdExCompletedEventHandler(object sender, ChangePwdExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePwdExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePwdExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ChangePwdExResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ChangePwdExResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string statusType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string statusMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string statusTrace {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ValidatePasswordCompletedEventHandler(object sender, ValidatePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidatePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidatePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ValidatePasswordResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ValidatePasswordResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public SqlAzManDBUser azManUser {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SqlAzManDBUser)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string statusType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string stackTrace {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckAccessLDAPCompletedEventHandler(object sender, CheckAccessLDAPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAccessLDAPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAccessLDAPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool CheckAccessLDAPResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool CheckAccessLDAPResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public AuthorizationType authorization {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuthorizationType)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool authorizationSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string statusType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string stackTrace {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckAccessLDAPExCompletedEventHandler(object sender, CheckAccessLDAPExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAccessLDAPExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAccessLDAPExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool CheckAccessLDAPExResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool CheckAccessLDAPExResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public KeyValuePairOfstringstring[] attributes {
            get {
                this.RaiseExceptionIfNecessary();
                return ((KeyValuePairOfstringstring[])(this.results[2]));
            }
        }
        
        /// <remarks/>
        public AuthorizationType authorization {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuthorizationType)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public bool authorizationSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string statusType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string stackTrace {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
}

#pragma warning restore 1591