//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NetSqlAzMan.LDAPHelperSvcRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LDAPSearchResult", Namespace="http://schemas.datacontract.org/2004/07/LDAPProxyWebSvc")]
    [System.SerializableAttribute()]
    public partial class LDAPSearchResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DirectoryEntryPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DomainProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> ResultFromGCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string canonicalNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string companyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> createTimeStampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string defaultClassStoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string departmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string displayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string distinguishedNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string givenNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long lastLogonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string mailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult managerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] memberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] memberOfField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string objectCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] objectClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string objectGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] objectGuidBytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string objectSidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] objectSidBytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string samAccountNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string snField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string telephoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userPrincipalNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DirectoryEntryPath {
            get {
                return this.DirectoryEntryPathField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectoryEntryPathField, value) != true)) {
                    this.DirectoryEntryPathField = value;
                    this.RaisePropertyChanged("DirectoryEntryPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DomainProfile {
            get {
                return this.DomainProfileField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainProfileField, value) != true)) {
                    this.DomainProfileField = value;
                    this.RaisePropertyChanged("DomainProfile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> ResultFromGC {
            get {
                return this.ResultFromGCField;
            }
            set {
                if ((this.ResultFromGCField.Equals(value) != true)) {
                    this.ResultFromGCField = value;
                    this.RaisePropertyChanged("ResultFromGC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string c {
            get {
                return this.cField;
            }
            set {
                if ((object.ReferenceEquals(this.cField, value) != true)) {
                    this.cField = value;
                    this.RaisePropertyChanged("c");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string canonicalName {
            get {
                return this.canonicalNameField;
            }
            set {
                if ((object.ReferenceEquals(this.canonicalNameField, value) != true)) {
                    this.canonicalNameField = value;
                    this.RaisePropertyChanged("canonicalName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cn {
            get {
                return this.cnField;
            }
            set {
                if ((object.ReferenceEquals(this.cnField, value) != true)) {
                    this.cnField = value;
                    this.RaisePropertyChanged("cn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string company {
            get {
                return this.companyField;
            }
            set {
                if ((object.ReferenceEquals(this.companyField, value) != true)) {
                    this.companyField = value;
                    this.RaisePropertyChanged("company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> createTimeStamp {
            get {
                return this.createTimeStampField;
            }
            set {
                if ((this.createTimeStampField.Equals(value) != true)) {
                    this.createTimeStampField = value;
                    this.RaisePropertyChanged("createTimeStamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string defaultClassStore {
            get {
                return this.defaultClassStoreField;
            }
            set {
                if ((object.ReferenceEquals(this.defaultClassStoreField, value) != true)) {
                    this.defaultClassStoreField = value;
                    this.RaisePropertyChanged("defaultClassStore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string department {
            get {
                return this.departmentField;
            }
            set {
                if ((object.ReferenceEquals(this.departmentField, value) != true)) {
                    this.departmentField = value;
                    this.RaisePropertyChanged("department");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string displayName {
            get {
                return this.displayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.displayNameField, value) != true)) {
                    this.displayNameField = value;
                    this.RaisePropertyChanged("displayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string distinguishedName {
            get {
                return this.distinguishedNameField;
            }
            set {
                if ((object.ReferenceEquals(this.distinguishedNameField, value) != true)) {
                    this.distinguishedNameField = value;
                    this.RaisePropertyChanged("distinguishedName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string givenName {
            get {
                return this.givenNameField;
            }
            set {
                if ((object.ReferenceEquals(this.givenNameField, value) != true)) {
                    this.givenNameField = value;
                    this.RaisePropertyChanged("givenName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isDeleted {
            get {
                return this.isDeletedField;
            }
            set {
                if ((this.isDeletedField.Equals(value) != true)) {
                    this.isDeletedField = value;
                    this.RaisePropertyChanged("isDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long lastLogon {
            get {
                return this.lastLogonField;
            }
            set {
                if ((this.lastLogonField.Equals(value) != true)) {
                    this.lastLogonField = value;
                    this.RaisePropertyChanged("lastLogon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string mail {
            get {
                return this.mailField;
            }
            set {
                if ((object.ReferenceEquals(this.mailField, value) != true)) {
                    this.mailField = value;
                    this.RaisePropertyChanged("mail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult manager {
            get {
                return this.managerField;
            }
            set {
                if ((object.ReferenceEquals(this.managerField, value) != true)) {
                    this.managerField = value;
                    this.RaisePropertyChanged("manager");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] member {
            get {
                return this.memberField;
            }
            set {
                if ((object.ReferenceEquals(this.memberField, value) != true)) {
                    this.memberField = value;
                    this.RaisePropertyChanged("member");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] memberOf {
            get {
                return this.memberOfField;
            }
            set {
                if ((object.ReferenceEquals(this.memberOfField, value) != true)) {
                    this.memberOfField = value;
                    this.RaisePropertyChanged("memberOf");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string objectCategory {
            get {
                return this.objectCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.objectCategoryField, value) != true)) {
                    this.objectCategoryField = value;
                    this.RaisePropertyChanged("objectCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] objectClass {
            get {
                return this.objectClassField;
            }
            set {
                if ((object.ReferenceEquals(this.objectClassField, value) != true)) {
                    this.objectClassField = value;
                    this.RaisePropertyChanged("objectClass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string objectGuid {
            get {
                return this.objectGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.objectGuidField, value) != true)) {
                    this.objectGuidField = value;
                    this.RaisePropertyChanged("objectGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] objectGuidBytes {
            get {
                return this.objectGuidBytesField;
            }
            set {
                if ((object.ReferenceEquals(this.objectGuidBytesField, value) != true)) {
                    this.objectGuidBytesField = value;
                    this.RaisePropertyChanged("objectGuidBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string objectSid {
            get {
                return this.objectSidField;
            }
            set {
                if ((object.ReferenceEquals(this.objectSidField, value) != true)) {
                    this.objectSidField = value;
                    this.RaisePropertyChanged("objectSid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] objectSidBytes {
            get {
                return this.objectSidBytesField;
            }
            set {
                if ((object.ReferenceEquals(this.objectSidBytesField, value) != true)) {
                    this.objectSidBytesField = value;
                    this.RaisePropertyChanged("objectSidBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string samAccountName {
            get {
                return this.samAccountNameField;
            }
            set {
                if ((object.ReferenceEquals(this.samAccountNameField, value) != true)) {
                    this.samAccountNameField = value;
                    this.RaisePropertyChanged("samAccountName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sn {
            get {
                return this.snField;
            }
            set {
                if ((object.ReferenceEquals(this.snField, value) != true)) {
                    this.snField = value;
                    this.RaisePropertyChanged("sn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string telephoneNumber {
            get {
                return this.telephoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.telephoneNumberField, value) != true)) {
                    this.telephoneNumberField = value;
                    this.RaisePropertyChanged("telephoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userPrincipalName {
            get {
                return this.userPrincipalNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userPrincipalNameField, value) != true)) {
                    this.userPrincipalNameField = value;
                    this.RaisePropertyChanged("userPrincipalName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusInfo", Namespace="http://schemas.datacontract.org/2004/07/LDAPProxyWebSvc")]
    [System.SerializableAttribute()]
    public partial class StatusInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExceptionTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsExceptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StackTraceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusMessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExceptionType {
            get {
                return this.ExceptionTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionTypeField, value) != true)) {
                    this.ExceptionTypeField = value;
                    this.RaisePropertyChanged("ExceptionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsException {
            get {
                return this.IsExceptionField;
            }
            set {
                if ((this.IsExceptionField.Equals(value) != true)) {
                    this.IsExceptionField = value;
                    this.RaisePropertyChanged("IsException");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace {
            get {
                return this.StackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.StackTraceField, value) != true)) {
                    this.StackTraceField = value;
                    this.RaisePropertyChanged("StackTrace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusMessage {
            get {
                return this.StatusMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusMessageField, value) != true)) {
                    this.StatusMessageField = value;
                    this.RaisePropertyChanged("StatusMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LDAPHelper.ADProperties", Namespace="http://schemas.datacontract.org/2004/07/LDAPProxyWebSvc")]
    public enum LDAPHelperADProperties : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        objectGuid = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        objectSid = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        telephoneNumber = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        samAccountName = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        manager = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        title = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        givenName = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        sn = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cn = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        canonicalName = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        userPrincipalName = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        c = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        company = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        createTimeStamp = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        defaultClassStore = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        department = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        description = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        displayName = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        distinguishedName = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        isDeleted = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        lastLogon = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        objectCategory = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        objectClass = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        member = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        memberOf = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        mail = 25,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ADObjectType", Namespace="http://schemas.datacontract.org/2004/07/LDAPProxyWebSvc")]
    public enum ADObjectType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UsersAndGroups = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UsersOnly = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OneUserOnly = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ADObject", Namespace="http://schemas.datacontract.org/2004/07/LDAPProxyWebSvc")]
    [System.SerializableAttribute()]
    public partial class ADObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ADsPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClassNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DomainProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NetSqlAzMan.LDAPHelperSvcRef.ADObjectState StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UPNField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ADsPath {
            get {
                return this.ADsPathField;
            }
            set {
                if ((object.ReferenceEquals(this.ADsPathField, value) != true)) {
                    this.ADsPathField = value;
                    this.RaisePropertyChanged("ADsPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClassName {
            get {
                return this.ClassNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassNameField, value) != true)) {
                    this.ClassNameField = value;
                    this.RaisePropertyChanged("ClassName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DomainProfile {
            get {
                return this.DomainProfileField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainProfileField, value) != true)) {
                    this.DomainProfileField = value;
                    this.RaisePropertyChanged("DomainProfile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsGroup {
            get {
                return this.IsGroupField;
            }
            set {
                if ((this.IsGroupField.Equals(value) != true)) {
                    this.IsGroupField = value;
                    this.RaisePropertyChanged("IsGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sid {
            get {
                return this.SidField;
            }
            set {
                if ((object.ReferenceEquals(this.SidField, value) != true)) {
                    this.SidField = value;
                    this.RaisePropertyChanged("Sid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NetSqlAzMan.LDAPHelperSvcRef.ADObjectState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UPN {
            get {
                return this.UPNField;
            }
            set {
                if ((object.ReferenceEquals(this.UPNField, value) != true)) {
                    this.UPNField = value;
                    this.RaisePropertyChanged("UPN");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ADObjectState", Namespace="http://schemas.datacontract.org/2004/07/LDAPProxyWebSvc")]
    public enum ADObjectState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Resolved = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotFound = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Multiple = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LDAPHelperSvcRef.ILDAPHelper")]
    public interface ILDAPHelper {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILDAPHelper/GetDefaultNamingContext", ReplyAction="http://tempuri.org/ILDAPHelper/GetDefaultNamingContextResponse")]
        string GetDefaultNamingContext();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILDAPHelper/GetDefaultNamingContext", ReplyAction="http://tempuri.org/ILDAPHelper/GetDefaultNamingContextResponse")]
        System.IAsyncResult BeginGetDefaultNamingContext(System.AsyncCallback callback, object asyncState);
        
        string EndGetDefaultNamingContext(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILDAPHelper/AuthenticateUser", ReplyAction="http://tempuri.org/ILDAPHelper/AuthenticateUserResponse")]
        bool AuthenticateUser(out bool authenticated, out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult userProperties, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string domainUser, string password, bool useGC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILDAPHelper/AuthenticateUser", ReplyAction="http://tempuri.org/ILDAPHelper/AuthenticateUserResponse")]
        System.IAsyncResult BeginAuthenticateUser(string domainProfile, string domainUser, string password, bool useGC, System.AsyncCallback callback, object asyncState);
        
        bool EndAuthenticateUser(out bool authenticated, out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult userProperties, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILDAPHelper/GetCanonicalNameForSAMAccountName", ReplyAction="http://tempuri.org/ILDAPHelper/GetCanonicalNameForSAMAccountNameResponse")]
        bool GetCanonicalNameForSAMAccountName(out string canonicalName, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string sAMAccountName, bool useGC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILDAPHelper/GetCanonicalNameForSAMAccountName", ReplyAction="http://tempuri.org/ILDAPHelper/GetCanonicalNameForSAMAccountNameResponse")]
        System.IAsyncResult BeginGetCanonicalNameForSAMAccountName(string domainProfile, string sAMAccountName, bool useGC, System.AsyncCallback callback, object asyncState);
        
        bool EndGetCanonicalNameForSAMAccountName(out string canonicalName, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILDAPHelper/GetGroupsForSAMAccountName", ReplyAction="http://tempuri.org/ILDAPHelper/GetGroupsForSAMAccountNameResponse")]
        bool GetGroupsForSAMAccountName(out string[] groups, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string sAMAccountName, bool useGC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILDAPHelper/GetGroupsForSAMAccountName", ReplyAction="http://tempuri.org/ILDAPHelper/GetGroupsForSAMAccountNameResponse")]
        System.IAsyncResult BeginGetGroupsForSAMAccountName(string domainProfile, string sAMAccountName, bool useGC, System.AsyncCallback callback, object asyncState);
        
        bool EndGetGroupsForSAMAccountName(out string[] groups, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILDAPHelper/CheckGroupMembershipForSAMAccountName", ReplyAction="http://tempuri.org/ILDAPHelper/CheckGroupMembershipForSAMAccountNameResponse")]
        bool CheckGroupMembershipForSAMAccountName(out bool isMember, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string sAMAccountName, string groupName, bool useGC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILDAPHelper/CheckGroupMembershipForSAMAccountName", ReplyAction="http://tempuri.org/ILDAPHelper/CheckGroupMembershipForSAMAccountNameResponse")]
        System.IAsyncResult BeginCheckGroupMembershipForSAMAccountName(string domainProfile, string sAMAccountName, string groupName, bool useGC, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckGroupMembershipForSAMAccountName(out bool isMember, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILDAPHelper/SearchAnything", ReplyAction="http://tempuri.org/ILDAPHelper/SearchAnythingResponse")]
        bool SearchAnything(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, bool useGC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILDAPHelper/SearchAnything", ReplyAction="http://tempuri.org/ILDAPHelper/SearchAnythingResponse")]
        System.IAsyncResult BeginSearchAnything(string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, bool useGC, System.AsyncCallback callback, object asyncState);
        
        bool EndSearchAnything([System.ServiceModel.MessageParameterAttribute(Name="result")] out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result1, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILDAPHelper/SearchUsersAndGroups", ReplyAction="http://tempuri.org/ILDAPHelper/SearchUsersAndGroupsResponse")]
        bool SearchUsersAndGroups(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, bool useGC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILDAPHelper/SearchUsersAndGroups", ReplyAction="http://tempuri.org/ILDAPHelper/SearchUsersAndGroupsResponse")]
        System.IAsyncResult BeginSearchUsersAndGroups(string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, bool useGC, System.AsyncCallback callback, object asyncState);
        
        bool EndSearchUsersAndGroups([System.ServiceModel.MessageParameterAttribute(Name="result")] out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result1, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILDAPHelper/SearchUsersAndGroupsByTwoProperties", ReplyAction="http://tempuri.org/ILDAPHelper/SearchUsersAndGroupsByTwoPropertiesResponse")]
        bool SearchUsersAndGroupsByTwoProperties(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty2, string filterValue2, bool useGC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILDAPHelper/SearchUsersAndGroupsByTwoProperties", ReplyAction="http://tempuri.org/ILDAPHelper/SearchUsersAndGroupsByTwoPropertiesResponse")]
        System.IAsyncResult BeginSearchUsersAndGroupsByTwoProperties(string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty2, string filterValue2, bool useGC, System.AsyncCallback callback, object asyncState);
        
        bool EndSearchUsersAndGroupsByTwoProperties([System.ServiceModel.MessageParameterAttribute(Name="result")] out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result1, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILDAPHelper/SearchBySid", ReplyAction="http://tempuri.org/ILDAPHelper/SearchBySidResponse")]
        bool SearchBySid(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] searchResult, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string objectSid, bool useGC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILDAPHelper/SearchBySid", ReplyAction="http://tempuri.org/ILDAPHelper/SearchBySidResponse")]
        System.IAsyncResult BeginSearchBySid(string domainProfile, string objectSid, bool useGC, System.AsyncCallback callback, object asyncState);
        
        bool EndSearchBySid(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] searchResult, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILDAPHelper/SearchByBaseDN", ReplyAction="http://tempuri.org/ILDAPHelper/SearchByBaseDNResponse")]
        bool SearchByBaseDN(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] searchResult, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string baseDN, System.DirectoryServices.SearchScope scope, bool useGC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILDAPHelper/SearchByBaseDN", ReplyAction="http://tempuri.org/ILDAPHelper/SearchByBaseDNResponse")]
        System.IAsyncResult BeginSearchByBaseDN(string domainProfile, string baseDN, System.DirectoryServices.SearchScope scope, bool useGC, System.AsyncCallback callback, object asyncState);
        
        bool EndSearchByBaseDN(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] searchResult, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILDAPHelper/SearchUsersAndGroupsOrNTAccount", ReplyAction="http://tempuri.org/ILDAPHelper/SearchUsersAndGroupsOrNTAccountResponse")]
        bool SearchUsersAndGroupsOrNTAccount(out NetSqlAzMan.LDAPHelperSvcRef.ADObject[] proposed, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string name, NetSqlAzMan.LDAPHelperSvcRef.ADObjectType adObjectType, bool useGC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILDAPHelper/SearchUsersAndGroupsOrNTAccount", ReplyAction="http://tempuri.org/ILDAPHelper/SearchUsersAndGroupsOrNTAccountResponse")]
        System.IAsyncResult BeginSearchUsersAndGroupsOrNTAccount(string domainProfile, string name, NetSqlAzMan.LDAPHelperSvcRef.ADObjectType adObjectType, bool useGC, System.AsyncCallback callback, object asyncState);
        
        bool EndSearchUsersAndGroupsOrNTAccount(out NetSqlAzMan.LDAPHelperSvcRef.ADObject[] proposed, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILDAPHelper/GetGroupsRecursivelyForObjectSID", ReplyAction="http://tempuri.org/ILDAPHelper/GetGroupsRecursivelyForObjectSIDResponse")]
        bool GetGroupsRecursivelyForObjectSID(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] groups, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string objectSid, bool useGC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILDAPHelper/GetGroupsRecursivelyForObjectSID", ReplyAction="http://tempuri.org/ILDAPHelper/GetGroupsRecursivelyForObjectSIDResponse")]
        System.IAsyncResult BeginGetGroupsRecursivelyForObjectSID(string domainProfile, string objectSid, bool useGC, System.AsyncCallback callback, object asyncState);
        
        bool EndGetGroupsRecursivelyForObjectSID(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] groups, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILDAPHelper/GetGroupsRecursivelyForDistinguishedName", ReplyAction="http://tempuri.org/ILDAPHelper/GetGroupsRecursivelyForDistinguishedNameResponse")]
        bool GetGroupsRecursivelyForDistinguishedName(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] groups, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string distinguishedName, bool useGC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILDAPHelper/GetGroupsRecursivelyForDistinguishedName", ReplyAction="http://tempuri.org/ILDAPHelper/GetGroupsRecursivelyForDistinguishedNameResponse")]
        System.IAsyncResult BeginGetGroupsRecursivelyForDistinguishedName(string domainProfile, string distinguishedName, bool useGC, System.AsyncCallback callback, object asyncState);
        
        bool EndGetGroupsRecursivelyForDistinguishedName(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] groups, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILDAPHelperChannel : NetSqlAzMan.LDAPHelperSvcRef.ILDAPHelper, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDefaultNamingContextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDefaultNamingContextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AuthenticateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool authenticated {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult userProperties {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult)(this.results[1]));
            }
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.StatusInfo)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCanonicalNameForSAMAccountNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCanonicalNameForSAMAccountNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string canonicalName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.StatusInfo)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupsForSAMAccountNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupsForSAMAccountNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] groups {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.StatusInfo)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckGroupMembershipForSAMAccountNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckGroupMembershipForSAMAccountNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool isMember {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.StatusInfo)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchAnythingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchAnythingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result1 {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[])(this.results[0]));
            }
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.StatusInfo)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchUsersAndGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchUsersAndGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result1 {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[])(this.results[0]));
            }
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.StatusInfo)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchUsersAndGroupsByTwoPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchUsersAndGroupsByTwoPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result1 {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[])(this.results[0]));
            }
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.StatusInfo)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchBySidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchBySidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] searchResult {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[])(this.results[0]));
            }
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.StatusInfo)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchByBaseDNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchByBaseDNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] searchResult {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[])(this.results[0]));
            }
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.StatusInfo)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchUsersAndGroupsOrNTAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchUsersAndGroupsOrNTAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.ADObject[] proposed {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.ADObject[])(this.results[0]));
            }
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.StatusInfo)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupsRecursivelyForObjectSIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupsRecursivelyForObjectSIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] groups {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[])(this.results[0]));
            }
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.StatusInfo)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupsRecursivelyForDistinguishedNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupsRecursivelyForDistinguishedNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] groups {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[])(this.results[0]));
            }
        }
        
        public NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.LDAPHelperSvcRef.StatusInfo)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LDAPHelperClient : System.ServiceModel.ClientBase<NetSqlAzMan.LDAPHelperSvcRef.ILDAPHelper>, NetSqlAzMan.LDAPHelperSvcRef.ILDAPHelper {
        
        private BeginOperationDelegate onBeginGetDefaultNamingContextDelegate;
        
        private EndOperationDelegate onEndGetDefaultNamingContextDelegate;
        
        private System.Threading.SendOrPostCallback onGetDefaultNamingContextCompletedDelegate;
        
        private BeginOperationDelegate onBeginAuthenticateUserDelegate;
        
        private EndOperationDelegate onEndAuthenticateUserDelegate;
        
        private System.Threading.SendOrPostCallback onAuthenticateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCanonicalNameForSAMAccountNameDelegate;
        
        private EndOperationDelegate onEndGetCanonicalNameForSAMAccountNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetCanonicalNameForSAMAccountNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupsForSAMAccountNameDelegate;
        
        private EndOperationDelegate onEndGetGroupsForSAMAccountNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupsForSAMAccountNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckGroupMembershipForSAMAccountNameDelegate;
        
        private EndOperationDelegate onEndCheckGroupMembershipForSAMAccountNameDelegate;
        
        private System.Threading.SendOrPostCallback onCheckGroupMembershipForSAMAccountNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchAnythingDelegate;
        
        private EndOperationDelegate onEndSearchAnythingDelegate;
        
        private System.Threading.SendOrPostCallback onSearchAnythingCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchUsersAndGroupsDelegate;
        
        private EndOperationDelegate onEndSearchUsersAndGroupsDelegate;
        
        private System.Threading.SendOrPostCallback onSearchUsersAndGroupsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchUsersAndGroupsByTwoPropertiesDelegate;
        
        private EndOperationDelegate onEndSearchUsersAndGroupsByTwoPropertiesDelegate;
        
        private System.Threading.SendOrPostCallback onSearchUsersAndGroupsByTwoPropertiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchBySidDelegate;
        
        private EndOperationDelegate onEndSearchBySidDelegate;
        
        private System.Threading.SendOrPostCallback onSearchBySidCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchByBaseDNDelegate;
        
        private EndOperationDelegate onEndSearchByBaseDNDelegate;
        
        private System.Threading.SendOrPostCallback onSearchByBaseDNCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchUsersAndGroupsOrNTAccountDelegate;
        
        private EndOperationDelegate onEndSearchUsersAndGroupsOrNTAccountDelegate;
        
        private System.Threading.SendOrPostCallback onSearchUsersAndGroupsOrNTAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupsRecursivelyForObjectSIDDelegate;
        
        private EndOperationDelegate onEndGetGroupsRecursivelyForObjectSIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupsRecursivelyForObjectSIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupsRecursivelyForDistinguishedNameDelegate;
        
        private EndOperationDelegate onEndGetGroupsRecursivelyForDistinguishedNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupsRecursivelyForDistinguishedNameCompletedDelegate;
        
        public LDAPHelperClient() {
        }
        
        public LDAPHelperClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LDAPHelperClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LDAPHelperClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LDAPHelperClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetDefaultNamingContextCompletedEventArgs> GetDefaultNamingContextCompleted;
        
        public event System.EventHandler<AuthenticateUserCompletedEventArgs> AuthenticateUserCompleted;
        
        public event System.EventHandler<GetCanonicalNameForSAMAccountNameCompletedEventArgs> GetCanonicalNameForSAMAccountNameCompleted;
        
        public event System.EventHandler<GetGroupsForSAMAccountNameCompletedEventArgs> GetGroupsForSAMAccountNameCompleted;
        
        public event System.EventHandler<CheckGroupMembershipForSAMAccountNameCompletedEventArgs> CheckGroupMembershipForSAMAccountNameCompleted;
        
        public event System.EventHandler<SearchAnythingCompletedEventArgs> SearchAnythingCompleted;
        
        public event System.EventHandler<SearchUsersAndGroupsCompletedEventArgs> SearchUsersAndGroupsCompleted;
        
        public event System.EventHandler<SearchUsersAndGroupsByTwoPropertiesCompletedEventArgs> SearchUsersAndGroupsByTwoPropertiesCompleted;
        
        public event System.EventHandler<SearchBySidCompletedEventArgs> SearchBySidCompleted;
        
        public event System.EventHandler<SearchByBaseDNCompletedEventArgs> SearchByBaseDNCompleted;
        
        public event System.EventHandler<SearchUsersAndGroupsOrNTAccountCompletedEventArgs> SearchUsersAndGroupsOrNTAccountCompleted;
        
        public event System.EventHandler<GetGroupsRecursivelyForObjectSIDCompletedEventArgs> GetGroupsRecursivelyForObjectSIDCompleted;
        
        public event System.EventHandler<GetGroupsRecursivelyForDistinguishedNameCompletedEventArgs> GetGroupsRecursivelyForDistinguishedNameCompleted;
        
        public string GetDefaultNamingContext() {
            return base.Channel.GetDefaultNamingContext();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDefaultNamingContext(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDefaultNamingContext(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetDefaultNamingContext(System.IAsyncResult result) {
            return base.Channel.EndGetDefaultNamingContext(result);
        }
        
        private System.IAsyncResult OnBeginGetDefaultNamingContext(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetDefaultNamingContext(callback, asyncState);
        }
        
        private object[] OnEndGetDefaultNamingContext(System.IAsyncResult result) {
            string retVal = this.EndGetDefaultNamingContext(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDefaultNamingContextCompleted(object state) {
            if ((this.GetDefaultNamingContextCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDefaultNamingContextCompleted(this, new GetDefaultNamingContextCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDefaultNamingContextAsync() {
            this.GetDefaultNamingContextAsync(null);
        }
        
        public void GetDefaultNamingContextAsync(object userState) {
            if ((this.onBeginGetDefaultNamingContextDelegate == null)) {
                this.onBeginGetDefaultNamingContextDelegate = new BeginOperationDelegate(this.OnBeginGetDefaultNamingContext);
            }
            if ((this.onEndGetDefaultNamingContextDelegate == null)) {
                this.onEndGetDefaultNamingContextDelegate = new EndOperationDelegate(this.OnEndGetDefaultNamingContext);
            }
            if ((this.onGetDefaultNamingContextCompletedDelegate == null)) {
                this.onGetDefaultNamingContextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDefaultNamingContextCompleted);
            }
            base.InvokeAsync(this.onBeginGetDefaultNamingContextDelegate, null, this.onEndGetDefaultNamingContextDelegate, this.onGetDefaultNamingContextCompletedDelegate, userState);
        }
        
        public bool AuthenticateUser(out bool authenticated, out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult userProperties, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string domainUser, string password, bool useGC) {
            return base.Channel.AuthenticateUser(out authenticated, out userProperties, out status, domainProfile, domainUser, password, useGC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAuthenticateUser(string domainProfile, string domainUser, string password, bool useGC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAuthenticateUser(domainProfile, domainUser, password, useGC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAuthenticateUser(out bool authenticated, out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult userProperties, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result) {
            return base.Channel.EndAuthenticateUser(out authenticated, out userProperties, out status, result);
        }
        
        private System.IAsyncResult OnBeginAuthenticateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string domainProfile = ((string)(inValues[0]));
            string domainUser = ((string)(inValues[1]));
            string password = ((string)(inValues[2]));
            bool useGC = ((bool)(inValues[3]));
            return this.BeginAuthenticateUser(domainProfile, domainUser, password, useGC, callback, asyncState);
        }
        
        private object[] OnEndAuthenticateUser(System.IAsyncResult result) {
            bool authenticated = this.GetDefaultValueForInitialization<bool>();
            NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult userProperties = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult>();
            NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.StatusInfo>();
            bool retVal = this.EndAuthenticateUser(out authenticated, out userProperties, out status, result);
            return new object[] {
                    authenticated,
                    userProperties,
                    status,
                    retVal};
        }
        
        private void OnAuthenticateUserCompleted(object state) {
            if ((this.AuthenticateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AuthenticateUserCompleted(this, new AuthenticateUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AuthenticateUserAsync(string domainProfile, string domainUser, string password, bool useGC) {
            this.AuthenticateUserAsync(domainProfile, domainUser, password, useGC, null);
        }
        
        public void AuthenticateUserAsync(string domainProfile, string domainUser, string password, bool useGC, object userState) {
            if ((this.onBeginAuthenticateUserDelegate == null)) {
                this.onBeginAuthenticateUserDelegate = new BeginOperationDelegate(this.OnBeginAuthenticateUser);
            }
            if ((this.onEndAuthenticateUserDelegate == null)) {
                this.onEndAuthenticateUserDelegate = new EndOperationDelegate(this.OnEndAuthenticateUser);
            }
            if ((this.onAuthenticateUserCompletedDelegate == null)) {
                this.onAuthenticateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAuthenticateUserCompleted);
            }
            base.InvokeAsync(this.onBeginAuthenticateUserDelegate, new object[] {
                        domainProfile,
                        domainUser,
                        password,
                        useGC}, this.onEndAuthenticateUserDelegate, this.onAuthenticateUserCompletedDelegate, userState);
        }
        
        public bool GetCanonicalNameForSAMAccountName(out string canonicalName, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string sAMAccountName, bool useGC) {
            return base.Channel.GetCanonicalNameForSAMAccountName(out canonicalName, out status, domainProfile, sAMAccountName, useGC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCanonicalNameForSAMAccountName(string domainProfile, string sAMAccountName, bool useGC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCanonicalNameForSAMAccountName(domainProfile, sAMAccountName, useGC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndGetCanonicalNameForSAMAccountName(out string canonicalName, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result) {
            return base.Channel.EndGetCanonicalNameForSAMAccountName(out canonicalName, out status, result);
        }
        
        private System.IAsyncResult OnBeginGetCanonicalNameForSAMAccountName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string domainProfile = ((string)(inValues[0]));
            string sAMAccountName = ((string)(inValues[1]));
            bool useGC = ((bool)(inValues[2]));
            return this.BeginGetCanonicalNameForSAMAccountName(domainProfile, sAMAccountName, useGC, callback, asyncState);
        }
        
        private object[] OnEndGetCanonicalNameForSAMAccountName(System.IAsyncResult result) {
            string canonicalName = this.GetDefaultValueForInitialization<string>();
            NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.StatusInfo>();
            bool retVal = this.EndGetCanonicalNameForSAMAccountName(out canonicalName, out status, result);
            return new object[] {
                    canonicalName,
                    status,
                    retVal};
        }
        
        private void OnGetCanonicalNameForSAMAccountNameCompleted(object state) {
            if ((this.GetCanonicalNameForSAMAccountNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCanonicalNameForSAMAccountNameCompleted(this, new GetCanonicalNameForSAMAccountNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCanonicalNameForSAMAccountNameAsync(string domainProfile, string sAMAccountName, bool useGC) {
            this.GetCanonicalNameForSAMAccountNameAsync(domainProfile, sAMAccountName, useGC, null);
        }
        
        public void GetCanonicalNameForSAMAccountNameAsync(string domainProfile, string sAMAccountName, bool useGC, object userState) {
            if ((this.onBeginGetCanonicalNameForSAMAccountNameDelegate == null)) {
                this.onBeginGetCanonicalNameForSAMAccountNameDelegate = new BeginOperationDelegate(this.OnBeginGetCanonicalNameForSAMAccountName);
            }
            if ((this.onEndGetCanonicalNameForSAMAccountNameDelegate == null)) {
                this.onEndGetCanonicalNameForSAMAccountNameDelegate = new EndOperationDelegate(this.OnEndGetCanonicalNameForSAMAccountName);
            }
            if ((this.onGetCanonicalNameForSAMAccountNameCompletedDelegate == null)) {
                this.onGetCanonicalNameForSAMAccountNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCanonicalNameForSAMAccountNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetCanonicalNameForSAMAccountNameDelegate, new object[] {
                        domainProfile,
                        sAMAccountName,
                        useGC}, this.onEndGetCanonicalNameForSAMAccountNameDelegate, this.onGetCanonicalNameForSAMAccountNameCompletedDelegate, userState);
        }
        
        public bool GetGroupsForSAMAccountName(out string[] groups, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string sAMAccountName, bool useGC) {
            return base.Channel.GetGroupsForSAMAccountName(out groups, out status, domainProfile, sAMAccountName, useGC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetGroupsForSAMAccountName(string domainProfile, string sAMAccountName, bool useGC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupsForSAMAccountName(domainProfile, sAMAccountName, useGC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndGetGroupsForSAMAccountName(out string[] groups, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result) {
            return base.Channel.EndGetGroupsForSAMAccountName(out groups, out status, result);
        }
        
        private System.IAsyncResult OnBeginGetGroupsForSAMAccountName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string domainProfile = ((string)(inValues[0]));
            string sAMAccountName = ((string)(inValues[1]));
            bool useGC = ((bool)(inValues[2]));
            return this.BeginGetGroupsForSAMAccountName(domainProfile, sAMAccountName, useGC, callback, asyncState);
        }
        
        private object[] OnEndGetGroupsForSAMAccountName(System.IAsyncResult result) {
            string[] groups = this.GetDefaultValueForInitialization<string[]>();
            NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.StatusInfo>();
            bool retVal = this.EndGetGroupsForSAMAccountName(out groups, out status, result);
            return new object[] {
                    groups,
                    status,
                    retVal};
        }
        
        private void OnGetGroupsForSAMAccountNameCompleted(object state) {
            if ((this.GetGroupsForSAMAccountNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupsForSAMAccountNameCompleted(this, new GetGroupsForSAMAccountNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupsForSAMAccountNameAsync(string domainProfile, string sAMAccountName, bool useGC) {
            this.GetGroupsForSAMAccountNameAsync(domainProfile, sAMAccountName, useGC, null);
        }
        
        public void GetGroupsForSAMAccountNameAsync(string domainProfile, string sAMAccountName, bool useGC, object userState) {
            if ((this.onBeginGetGroupsForSAMAccountNameDelegate == null)) {
                this.onBeginGetGroupsForSAMAccountNameDelegate = new BeginOperationDelegate(this.OnBeginGetGroupsForSAMAccountName);
            }
            if ((this.onEndGetGroupsForSAMAccountNameDelegate == null)) {
                this.onEndGetGroupsForSAMAccountNameDelegate = new EndOperationDelegate(this.OnEndGetGroupsForSAMAccountName);
            }
            if ((this.onGetGroupsForSAMAccountNameCompletedDelegate == null)) {
                this.onGetGroupsForSAMAccountNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupsForSAMAccountNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupsForSAMAccountNameDelegate, new object[] {
                        domainProfile,
                        sAMAccountName,
                        useGC}, this.onEndGetGroupsForSAMAccountNameDelegate, this.onGetGroupsForSAMAccountNameCompletedDelegate, userState);
        }
        
        public bool CheckGroupMembershipForSAMAccountName(out bool isMember, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string sAMAccountName, string groupName, bool useGC) {
            return base.Channel.CheckGroupMembershipForSAMAccountName(out isMember, out status, domainProfile, sAMAccountName, groupName, useGC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckGroupMembershipForSAMAccountName(string domainProfile, string sAMAccountName, string groupName, bool useGC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckGroupMembershipForSAMAccountName(domainProfile, sAMAccountName, groupName, useGC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCheckGroupMembershipForSAMAccountName(out bool isMember, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result) {
            return base.Channel.EndCheckGroupMembershipForSAMAccountName(out isMember, out status, result);
        }
        
        private System.IAsyncResult OnBeginCheckGroupMembershipForSAMAccountName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string domainProfile = ((string)(inValues[0]));
            string sAMAccountName = ((string)(inValues[1]));
            string groupName = ((string)(inValues[2]));
            bool useGC = ((bool)(inValues[3]));
            return this.BeginCheckGroupMembershipForSAMAccountName(domainProfile, sAMAccountName, groupName, useGC, callback, asyncState);
        }
        
        private object[] OnEndCheckGroupMembershipForSAMAccountName(System.IAsyncResult result) {
            bool isMember = this.GetDefaultValueForInitialization<bool>();
            NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.StatusInfo>();
            bool retVal = this.EndCheckGroupMembershipForSAMAccountName(out isMember, out status, result);
            return new object[] {
                    isMember,
                    status,
                    retVal};
        }
        
        private void OnCheckGroupMembershipForSAMAccountNameCompleted(object state) {
            if ((this.CheckGroupMembershipForSAMAccountNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckGroupMembershipForSAMAccountNameCompleted(this, new CheckGroupMembershipForSAMAccountNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckGroupMembershipForSAMAccountNameAsync(string domainProfile, string sAMAccountName, string groupName, bool useGC) {
            this.CheckGroupMembershipForSAMAccountNameAsync(domainProfile, sAMAccountName, groupName, useGC, null);
        }
        
        public void CheckGroupMembershipForSAMAccountNameAsync(string domainProfile, string sAMAccountName, string groupName, bool useGC, object userState) {
            if ((this.onBeginCheckGroupMembershipForSAMAccountNameDelegate == null)) {
                this.onBeginCheckGroupMembershipForSAMAccountNameDelegate = new BeginOperationDelegate(this.OnBeginCheckGroupMembershipForSAMAccountName);
            }
            if ((this.onEndCheckGroupMembershipForSAMAccountNameDelegate == null)) {
                this.onEndCheckGroupMembershipForSAMAccountNameDelegate = new EndOperationDelegate(this.OnEndCheckGroupMembershipForSAMAccountName);
            }
            if ((this.onCheckGroupMembershipForSAMAccountNameCompletedDelegate == null)) {
                this.onCheckGroupMembershipForSAMAccountNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckGroupMembershipForSAMAccountNameCompleted);
            }
            base.InvokeAsync(this.onBeginCheckGroupMembershipForSAMAccountNameDelegate, new object[] {
                        domainProfile,
                        sAMAccountName,
                        groupName,
                        useGC}, this.onEndCheckGroupMembershipForSAMAccountNameDelegate, this.onCheckGroupMembershipForSAMAccountNameCompletedDelegate, userState);
        }
        
        public bool SearchAnything(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, bool useGC) {
            return base.Channel.SearchAnything(out result, out status, domainProfile, filterProperty, filterValue, useGC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSearchAnything(string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, bool useGC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchAnything(domainProfile, filterProperty, filterValue, useGC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSearchAnything(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result1, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result) {
            return base.Channel.EndSearchAnything(out result1, out status, result);
        }
        
        private System.IAsyncResult OnBeginSearchAnything(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string domainProfile = ((string)(inValues[0]));
            NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty = ((NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties)(inValues[1]));
            string filterValue = ((string)(inValues[2]));
            bool useGC = ((bool)(inValues[3]));
            return this.BeginSearchAnything(domainProfile, filterProperty, filterValue, useGC, callback, asyncState);
        }
        
        private object[] OnEndSearchAnything(System.IAsyncResult result) {
            NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result1 = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[]>();
            NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.StatusInfo>();
            bool retVal = this.EndSearchAnything(out result1, out status, result);
            return new object[] {
                    result1,
                    status,
                    retVal};
        }
        
        private void OnSearchAnythingCompleted(object state) {
            if ((this.SearchAnythingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchAnythingCompleted(this, new SearchAnythingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchAnythingAsync(string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, bool useGC) {
            this.SearchAnythingAsync(domainProfile, filterProperty, filterValue, useGC, null);
        }
        
        public void SearchAnythingAsync(string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, bool useGC, object userState) {
            if ((this.onBeginSearchAnythingDelegate == null)) {
                this.onBeginSearchAnythingDelegate = new BeginOperationDelegate(this.OnBeginSearchAnything);
            }
            if ((this.onEndSearchAnythingDelegate == null)) {
                this.onEndSearchAnythingDelegate = new EndOperationDelegate(this.OnEndSearchAnything);
            }
            if ((this.onSearchAnythingCompletedDelegate == null)) {
                this.onSearchAnythingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchAnythingCompleted);
            }
            base.InvokeAsync(this.onBeginSearchAnythingDelegate, new object[] {
                        domainProfile,
                        filterProperty,
                        filterValue,
                        useGC}, this.onEndSearchAnythingDelegate, this.onSearchAnythingCompletedDelegate, userState);
        }
        
        public bool SearchUsersAndGroups(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, bool useGC) {
            return base.Channel.SearchUsersAndGroups(out result, out status, domainProfile, filterProperty, filterValue, useGC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSearchUsersAndGroups(string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, bool useGC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchUsersAndGroups(domainProfile, filterProperty, filterValue, useGC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSearchUsersAndGroups(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result1, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result) {
            return base.Channel.EndSearchUsersAndGroups(out result1, out status, result);
        }
        
        private System.IAsyncResult OnBeginSearchUsersAndGroups(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string domainProfile = ((string)(inValues[0]));
            NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty = ((NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties)(inValues[1]));
            string filterValue = ((string)(inValues[2]));
            bool useGC = ((bool)(inValues[3]));
            return this.BeginSearchUsersAndGroups(domainProfile, filterProperty, filterValue, useGC, callback, asyncState);
        }
        
        private object[] OnEndSearchUsersAndGroups(System.IAsyncResult result) {
            NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result1 = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[]>();
            NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.StatusInfo>();
            bool retVal = this.EndSearchUsersAndGroups(out result1, out status, result);
            return new object[] {
                    result1,
                    status,
                    retVal};
        }
        
        private void OnSearchUsersAndGroupsCompleted(object state) {
            if ((this.SearchUsersAndGroupsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchUsersAndGroupsCompleted(this, new SearchUsersAndGroupsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchUsersAndGroupsAsync(string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, bool useGC) {
            this.SearchUsersAndGroupsAsync(domainProfile, filterProperty, filterValue, useGC, null);
        }
        
        public void SearchUsersAndGroupsAsync(string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, bool useGC, object userState) {
            if ((this.onBeginSearchUsersAndGroupsDelegate == null)) {
                this.onBeginSearchUsersAndGroupsDelegate = new BeginOperationDelegate(this.OnBeginSearchUsersAndGroups);
            }
            if ((this.onEndSearchUsersAndGroupsDelegate == null)) {
                this.onEndSearchUsersAndGroupsDelegate = new EndOperationDelegate(this.OnEndSearchUsersAndGroups);
            }
            if ((this.onSearchUsersAndGroupsCompletedDelegate == null)) {
                this.onSearchUsersAndGroupsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchUsersAndGroupsCompleted);
            }
            base.InvokeAsync(this.onBeginSearchUsersAndGroupsDelegate, new object[] {
                        domainProfile,
                        filterProperty,
                        filterValue,
                        useGC}, this.onEndSearchUsersAndGroupsDelegate, this.onSearchUsersAndGroupsCompletedDelegate, userState);
        }
        
        public bool SearchUsersAndGroupsByTwoProperties(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty2, string filterValue2, bool useGC) {
            return base.Channel.SearchUsersAndGroupsByTwoProperties(out result, out status, domainProfile, filterProperty, filterValue, filterProperty2, filterValue2, useGC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSearchUsersAndGroupsByTwoProperties(string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty2, string filterValue2, bool useGC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchUsersAndGroupsByTwoProperties(domainProfile, filterProperty, filterValue, filterProperty2, filterValue2, useGC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSearchUsersAndGroupsByTwoProperties(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result1, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result) {
            return base.Channel.EndSearchUsersAndGroupsByTwoProperties(out result1, out status, result);
        }
        
        private System.IAsyncResult OnBeginSearchUsersAndGroupsByTwoProperties(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string domainProfile = ((string)(inValues[0]));
            NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty = ((NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties)(inValues[1]));
            string filterValue = ((string)(inValues[2]));
            NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty2 = ((NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties)(inValues[3]));
            string filterValue2 = ((string)(inValues[4]));
            bool useGC = ((bool)(inValues[5]));
            return this.BeginSearchUsersAndGroupsByTwoProperties(domainProfile, filterProperty, filterValue, filterProperty2, filterValue2, useGC, callback, asyncState);
        }
        
        private object[] OnEndSearchUsersAndGroupsByTwoProperties(System.IAsyncResult result) {
            NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] result1 = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[]>();
            NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.StatusInfo>();
            bool retVal = this.EndSearchUsersAndGroupsByTwoProperties(out result1, out status, result);
            return new object[] {
                    result1,
                    status,
                    retVal};
        }
        
        private void OnSearchUsersAndGroupsByTwoPropertiesCompleted(object state) {
            if ((this.SearchUsersAndGroupsByTwoPropertiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchUsersAndGroupsByTwoPropertiesCompleted(this, new SearchUsersAndGroupsByTwoPropertiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchUsersAndGroupsByTwoPropertiesAsync(string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty2, string filterValue2, bool useGC) {
            this.SearchUsersAndGroupsByTwoPropertiesAsync(domainProfile, filterProperty, filterValue, filterProperty2, filterValue2, useGC, null);
        }
        
        public void SearchUsersAndGroupsByTwoPropertiesAsync(string domainProfile, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty, string filterValue, NetSqlAzMan.LDAPHelperSvcRef.LDAPHelperADProperties filterProperty2, string filterValue2, bool useGC, object userState) {
            if ((this.onBeginSearchUsersAndGroupsByTwoPropertiesDelegate == null)) {
                this.onBeginSearchUsersAndGroupsByTwoPropertiesDelegate = new BeginOperationDelegate(this.OnBeginSearchUsersAndGroupsByTwoProperties);
            }
            if ((this.onEndSearchUsersAndGroupsByTwoPropertiesDelegate == null)) {
                this.onEndSearchUsersAndGroupsByTwoPropertiesDelegate = new EndOperationDelegate(this.OnEndSearchUsersAndGroupsByTwoProperties);
            }
            if ((this.onSearchUsersAndGroupsByTwoPropertiesCompletedDelegate == null)) {
                this.onSearchUsersAndGroupsByTwoPropertiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchUsersAndGroupsByTwoPropertiesCompleted);
            }
            base.InvokeAsync(this.onBeginSearchUsersAndGroupsByTwoPropertiesDelegate, new object[] {
                        domainProfile,
                        filterProperty,
                        filterValue,
                        filterProperty2,
                        filterValue2,
                        useGC}, this.onEndSearchUsersAndGroupsByTwoPropertiesDelegate, this.onSearchUsersAndGroupsByTwoPropertiesCompletedDelegate, userState);
        }
        
        public bool SearchBySid(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] searchResult, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string objectSid, bool useGC) {
            return base.Channel.SearchBySid(out searchResult, out status, domainProfile, objectSid, useGC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSearchBySid(string domainProfile, string objectSid, bool useGC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchBySid(domainProfile, objectSid, useGC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSearchBySid(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] searchResult, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result) {
            return base.Channel.EndSearchBySid(out searchResult, out status, result);
        }
        
        private System.IAsyncResult OnBeginSearchBySid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string domainProfile = ((string)(inValues[0]));
            string objectSid = ((string)(inValues[1]));
            bool useGC = ((bool)(inValues[2]));
            return this.BeginSearchBySid(domainProfile, objectSid, useGC, callback, asyncState);
        }
        
        private object[] OnEndSearchBySid(System.IAsyncResult result) {
            NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] searchResult = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[]>();
            NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.StatusInfo>();
            bool retVal = this.EndSearchBySid(out searchResult, out status, result);
            return new object[] {
                    searchResult,
                    status,
                    retVal};
        }
        
        private void OnSearchBySidCompleted(object state) {
            if ((this.SearchBySidCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchBySidCompleted(this, new SearchBySidCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchBySidAsync(string domainProfile, string objectSid, bool useGC) {
            this.SearchBySidAsync(domainProfile, objectSid, useGC, null);
        }
        
        public void SearchBySidAsync(string domainProfile, string objectSid, bool useGC, object userState) {
            if ((this.onBeginSearchBySidDelegate == null)) {
                this.onBeginSearchBySidDelegate = new BeginOperationDelegate(this.OnBeginSearchBySid);
            }
            if ((this.onEndSearchBySidDelegate == null)) {
                this.onEndSearchBySidDelegate = new EndOperationDelegate(this.OnEndSearchBySid);
            }
            if ((this.onSearchBySidCompletedDelegate == null)) {
                this.onSearchBySidCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchBySidCompleted);
            }
            base.InvokeAsync(this.onBeginSearchBySidDelegate, new object[] {
                        domainProfile,
                        objectSid,
                        useGC}, this.onEndSearchBySidDelegate, this.onSearchBySidCompletedDelegate, userState);
        }
        
        public bool SearchByBaseDN(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] searchResult, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string baseDN, System.DirectoryServices.SearchScope scope, bool useGC) {
            return base.Channel.SearchByBaseDN(out searchResult, out status, domainProfile, baseDN, scope, useGC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSearchByBaseDN(string domainProfile, string baseDN, System.DirectoryServices.SearchScope scope, bool useGC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchByBaseDN(domainProfile, baseDN, scope, useGC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSearchByBaseDN(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] searchResult, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result) {
            return base.Channel.EndSearchByBaseDN(out searchResult, out status, result);
        }
        
        private System.IAsyncResult OnBeginSearchByBaseDN(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string domainProfile = ((string)(inValues[0]));
            string baseDN = ((string)(inValues[1]));
            System.DirectoryServices.SearchScope scope = ((System.DirectoryServices.SearchScope)(inValues[2]));
            bool useGC = ((bool)(inValues[3]));
            return this.BeginSearchByBaseDN(domainProfile, baseDN, scope, useGC, callback, asyncState);
        }
        
        private object[] OnEndSearchByBaseDN(System.IAsyncResult result) {
            NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] searchResult = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[]>();
            NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.StatusInfo>();
            bool retVal = this.EndSearchByBaseDN(out searchResult, out status, result);
            return new object[] {
                    searchResult,
                    status,
                    retVal};
        }
        
        private void OnSearchByBaseDNCompleted(object state) {
            if ((this.SearchByBaseDNCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchByBaseDNCompleted(this, new SearchByBaseDNCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchByBaseDNAsync(string domainProfile, string baseDN, System.DirectoryServices.SearchScope scope, bool useGC) {
            this.SearchByBaseDNAsync(domainProfile, baseDN, scope, useGC, null);
        }
        
        public void SearchByBaseDNAsync(string domainProfile, string baseDN, System.DirectoryServices.SearchScope scope, bool useGC, object userState) {
            if ((this.onBeginSearchByBaseDNDelegate == null)) {
                this.onBeginSearchByBaseDNDelegate = new BeginOperationDelegate(this.OnBeginSearchByBaseDN);
            }
            if ((this.onEndSearchByBaseDNDelegate == null)) {
                this.onEndSearchByBaseDNDelegate = new EndOperationDelegate(this.OnEndSearchByBaseDN);
            }
            if ((this.onSearchByBaseDNCompletedDelegate == null)) {
                this.onSearchByBaseDNCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchByBaseDNCompleted);
            }
            base.InvokeAsync(this.onBeginSearchByBaseDNDelegate, new object[] {
                        domainProfile,
                        baseDN,
                        scope,
                        useGC}, this.onEndSearchByBaseDNDelegate, this.onSearchByBaseDNCompletedDelegate, userState);
        }
        
        public bool SearchUsersAndGroupsOrNTAccount(out NetSqlAzMan.LDAPHelperSvcRef.ADObject[] proposed, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string name, NetSqlAzMan.LDAPHelperSvcRef.ADObjectType adObjectType, bool useGC) {
            return base.Channel.SearchUsersAndGroupsOrNTAccount(out proposed, out status, domainProfile, name, adObjectType, useGC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSearchUsersAndGroupsOrNTAccount(string domainProfile, string name, NetSqlAzMan.LDAPHelperSvcRef.ADObjectType adObjectType, bool useGC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchUsersAndGroupsOrNTAccount(domainProfile, name, adObjectType, useGC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSearchUsersAndGroupsOrNTAccount(out NetSqlAzMan.LDAPHelperSvcRef.ADObject[] proposed, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result) {
            return base.Channel.EndSearchUsersAndGroupsOrNTAccount(out proposed, out status, result);
        }
        
        private System.IAsyncResult OnBeginSearchUsersAndGroupsOrNTAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string domainProfile = ((string)(inValues[0]));
            string name = ((string)(inValues[1]));
            NetSqlAzMan.LDAPHelperSvcRef.ADObjectType adObjectType = ((NetSqlAzMan.LDAPHelperSvcRef.ADObjectType)(inValues[2]));
            bool useGC = ((bool)(inValues[3]));
            return this.BeginSearchUsersAndGroupsOrNTAccount(domainProfile, name, adObjectType, useGC, callback, asyncState);
        }
        
        private object[] OnEndSearchUsersAndGroupsOrNTAccount(System.IAsyncResult result) {
            NetSqlAzMan.LDAPHelperSvcRef.ADObject[] proposed = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.ADObject[]>();
            NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.StatusInfo>();
            bool retVal = this.EndSearchUsersAndGroupsOrNTAccount(out proposed, out status, result);
            return new object[] {
                    proposed,
                    status,
                    retVal};
        }
        
        private void OnSearchUsersAndGroupsOrNTAccountCompleted(object state) {
            if ((this.SearchUsersAndGroupsOrNTAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchUsersAndGroupsOrNTAccountCompleted(this, new SearchUsersAndGroupsOrNTAccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchUsersAndGroupsOrNTAccountAsync(string domainProfile, string name, NetSqlAzMan.LDAPHelperSvcRef.ADObjectType adObjectType, bool useGC) {
            this.SearchUsersAndGroupsOrNTAccountAsync(domainProfile, name, adObjectType, useGC, null);
        }
        
        public void SearchUsersAndGroupsOrNTAccountAsync(string domainProfile, string name, NetSqlAzMan.LDAPHelperSvcRef.ADObjectType adObjectType, bool useGC, object userState) {
            if ((this.onBeginSearchUsersAndGroupsOrNTAccountDelegate == null)) {
                this.onBeginSearchUsersAndGroupsOrNTAccountDelegate = new BeginOperationDelegate(this.OnBeginSearchUsersAndGroupsOrNTAccount);
            }
            if ((this.onEndSearchUsersAndGroupsOrNTAccountDelegate == null)) {
                this.onEndSearchUsersAndGroupsOrNTAccountDelegate = new EndOperationDelegate(this.OnEndSearchUsersAndGroupsOrNTAccount);
            }
            if ((this.onSearchUsersAndGroupsOrNTAccountCompletedDelegate == null)) {
                this.onSearchUsersAndGroupsOrNTAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchUsersAndGroupsOrNTAccountCompleted);
            }
            base.InvokeAsync(this.onBeginSearchUsersAndGroupsOrNTAccountDelegate, new object[] {
                        domainProfile,
                        name,
                        adObjectType,
                        useGC}, this.onEndSearchUsersAndGroupsOrNTAccountDelegate, this.onSearchUsersAndGroupsOrNTAccountCompletedDelegate, userState);
        }
        
        public bool GetGroupsRecursivelyForObjectSID(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] groups, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string objectSid, bool useGC) {
            return base.Channel.GetGroupsRecursivelyForObjectSID(out groups, out status, domainProfile, objectSid, useGC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetGroupsRecursivelyForObjectSID(string domainProfile, string objectSid, bool useGC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupsRecursivelyForObjectSID(domainProfile, objectSid, useGC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndGetGroupsRecursivelyForObjectSID(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] groups, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result) {
            return base.Channel.EndGetGroupsRecursivelyForObjectSID(out groups, out status, result);
        }
        
        private System.IAsyncResult OnBeginGetGroupsRecursivelyForObjectSID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string domainProfile = ((string)(inValues[0]));
            string objectSid = ((string)(inValues[1]));
            bool useGC = ((bool)(inValues[2]));
            return this.BeginGetGroupsRecursivelyForObjectSID(domainProfile, objectSid, useGC, callback, asyncState);
        }
        
        private object[] OnEndGetGroupsRecursivelyForObjectSID(System.IAsyncResult result) {
            NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] groups = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[]>();
            NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.StatusInfo>();
            bool retVal = this.EndGetGroupsRecursivelyForObjectSID(out groups, out status, result);
            return new object[] {
                    groups,
                    status,
                    retVal};
        }
        
        private void OnGetGroupsRecursivelyForObjectSIDCompleted(object state) {
            if ((this.GetGroupsRecursivelyForObjectSIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupsRecursivelyForObjectSIDCompleted(this, new GetGroupsRecursivelyForObjectSIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupsRecursivelyForObjectSIDAsync(string domainProfile, string objectSid, bool useGC) {
            this.GetGroupsRecursivelyForObjectSIDAsync(domainProfile, objectSid, useGC, null);
        }
        
        public void GetGroupsRecursivelyForObjectSIDAsync(string domainProfile, string objectSid, bool useGC, object userState) {
            if ((this.onBeginGetGroupsRecursivelyForObjectSIDDelegate == null)) {
                this.onBeginGetGroupsRecursivelyForObjectSIDDelegate = new BeginOperationDelegate(this.OnBeginGetGroupsRecursivelyForObjectSID);
            }
            if ((this.onEndGetGroupsRecursivelyForObjectSIDDelegate == null)) {
                this.onEndGetGroupsRecursivelyForObjectSIDDelegate = new EndOperationDelegate(this.OnEndGetGroupsRecursivelyForObjectSID);
            }
            if ((this.onGetGroupsRecursivelyForObjectSIDCompletedDelegate == null)) {
                this.onGetGroupsRecursivelyForObjectSIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupsRecursivelyForObjectSIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupsRecursivelyForObjectSIDDelegate, new object[] {
                        domainProfile,
                        objectSid,
                        useGC}, this.onEndGetGroupsRecursivelyForObjectSIDDelegate, this.onGetGroupsRecursivelyForObjectSIDCompletedDelegate, userState);
        }
        
        public bool GetGroupsRecursivelyForDistinguishedName(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] groups, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, string domainProfile, string distinguishedName, bool useGC) {
            return base.Channel.GetGroupsRecursivelyForDistinguishedName(out groups, out status, domainProfile, distinguishedName, useGC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetGroupsRecursivelyForDistinguishedName(string domainProfile, string distinguishedName, bool useGC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupsRecursivelyForDistinguishedName(domainProfile, distinguishedName, useGC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndGetGroupsRecursivelyForDistinguishedName(out NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] groups, out NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status, System.IAsyncResult result) {
            return base.Channel.EndGetGroupsRecursivelyForDistinguishedName(out groups, out status, result);
        }
        
        private System.IAsyncResult OnBeginGetGroupsRecursivelyForDistinguishedName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string domainProfile = ((string)(inValues[0]));
            string distinguishedName = ((string)(inValues[1]));
            bool useGC = ((bool)(inValues[2]));
            return this.BeginGetGroupsRecursivelyForDistinguishedName(domainProfile, distinguishedName, useGC, callback, asyncState);
        }
        
        private object[] OnEndGetGroupsRecursivelyForDistinguishedName(System.IAsyncResult result) {
            NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[] groups = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.LDAPSearchResult[]>();
            NetSqlAzMan.LDAPHelperSvcRef.StatusInfo status = this.GetDefaultValueForInitialization<NetSqlAzMan.LDAPHelperSvcRef.StatusInfo>();
            bool retVal = this.EndGetGroupsRecursivelyForDistinguishedName(out groups, out status, result);
            return new object[] {
                    groups,
                    status,
                    retVal};
        }
        
        private void OnGetGroupsRecursivelyForDistinguishedNameCompleted(object state) {
            if ((this.GetGroupsRecursivelyForDistinguishedNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupsRecursivelyForDistinguishedNameCompleted(this, new GetGroupsRecursivelyForDistinguishedNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupsRecursivelyForDistinguishedNameAsync(string domainProfile, string distinguishedName, bool useGC) {
            this.GetGroupsRecursivelyForDistinguishedNameAsync(domainProfile, distinguishedName, useGC, null);
        }
        
        public void GetGroupsRecursivelyForDistinguishedNameAsync(string domainProfile, string distinguishedName, bool useGC, object userState) {
            if ((this.onBeginGetGroupsRecursivelyForDistinguishedNameDelegate == null)) {
                this.onBeginGetGroupsRecursivelyForDistinguishedNameDelegate = new BeginOperationDelegate(this.OnBeginGetGroupsRecursivelyForDistinguishedName);
            }
            if ((this.onEndGetGroupsRecursivelyForDistinguishedNameDelegate == null)) {
                this.onEndGetGroupsRecursivelyForDistinguishedNameDelegate = new EndOperationDelegate(this.OnEndGetGroupsRecursivelyForDistinguishedName);
            }
            if ((this.onGetGroupsRecursivelyForDistinguishedNameCompletedDelegate == null)) {
                this.onGetGroupsRecursivelyForDistinguishedNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupsRecursivelyForDistinguishedNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupsRecursivelyForDistinguishedNameDelegate, new object[] {
                        domainProfile,
                        distinguishedName,
                        useGC}, this.onEndGetGroupsRecursivelyForDistinguishedNameDelegate, this.onGetGroupsRecursivelyForDistinguishedNameCompletedDelegate, userState);
        }
    }
}
